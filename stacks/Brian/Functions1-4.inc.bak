<?php
/* Stacks version 2. 
Players can now move more than one counter at a time in the playing area.
In version 1 a player can only ever move 1 counter at a time so long the current stack was of equal or greater height as the next. Now up to n counters can be moved together so long as the current stack is n-1 counters taller than the next. (When the current and next stacks are of equal height then only 1 counter can be moved.) The ownership of the counters that are moved doesn't change so a player can move his opponent's counters.
All other rules are the same as before.
*/
/*Stacks version 3. 
Introduce transactions so that database updates are done consistently i.e. they all work or all are rolled back.
Read only queries (SELECTs) are ok becuase they return a value which is checked for errors.
Update/Add queries don't return any data so they will need to return a value to show if they worked or not
	fnQryAddPlayer [Done]
	fnQryUpdateRefs [No change required]
	fnQryAddStack [Used in fnProcessMove (Done) and fnSetUpGameRecs/fnProcessNewP1 (Done)]
	fnQryUpdateStack [Used in fnProcessMove (Done) and fnSetUpPlayer2/fnProcessNewP2 (Done)]
	fnQryAddGame [Used in fnProcessMove (Done) and fnSetUpGameRecs/fnProcessNewP1 (Done)]
	fnQryUpdateGame [Used in fnProcessMove (Done) and fnProcessInput/RESIGN (Done)]
	fnQryAddCounter  [Used in fnProcessMove (Done), fnSetUpGameRecs/fnProcessNewP2 (Done) and fnSetUpPlayer2/fnProcessNewP2 (Done)]
	fnQryUpdateCounter [Used in fnProcessMove (done)]
	(LogMessage)
	(TidyLog)
*/
/*Stacks version 4.
In this version the computer - Game Central - will use minimax or negamax (nmx for short) artificial intelligence routines to decide its moves.

************
Things to do
************
	
	New function called fnProcessNmxMove
		Determine if GameKey is a GameRecID or a Nmx hash key - check length of the key is less than 20 [Done]
		Calculate a new hash key [Done]
		Use fnValidatePlay if the GameKey is GameRecID otherwise use a new function that does the validation for Nmx games [Done]
		Create a new function for validating Nmx games [done]
		Create a new function to make a Nmx move - fnMakeNmxMove [done]
	New function called fnEvaluateGame to calculate a score for a given negamax game. Score from the perspective of the last player. [done]
	New sql functions required to 
		select nmx_counters [Done]
		select nmx_stacks [done]
		select nmx_games [Done]
		select game record using GameRecID [Done]
		Update nmx_counters, nmx-stakcs, nms-games [done]
		Store new nmx_counters, nmx-stakcs, nms-games [done]
	Need to store logging messages and (re)write them to the database AFTER the rollback in fnProcessMove [Done]
	Need to store logging messages and (re)write them to the database AFTER the rollback in fnProcessInput [Done]
	Add an extra exception to the delete and update SQL queries to make sure that the expected number of records have been deleted or updated. See delete games for example [Done] 
*/
/*Stacks version 5.
Combined the negamax functions into a routine to work out the best next move
*/

//Global variables for database queries
$conn; $logLevel;
$qryAddPlayer; $qrySelectPlayer; 
$qryUpdateRefs; $qrySelectRefs; 
$qryAddStack; $qrySelectStacks; $qryUpdateStack; $qryDeleteStacksForManyTurns; $qryDeleteStacksForOneTurn;
$qryAddGame; $qrySelectGame; $qrySelectGameByID; $qryUpdateGame; $qrySelectGamesForPlayer; $qryDeleteGames;
$qryAddCounter; $qrySelectCounters; $qryUpdateCounter; $qrySelectAllCounters; $qryDeleteCountersForManyTurns; $qryDeleteCountersForOneTurn;
$qrySelectOpenGames; 
$qryAddNmxCounter; $qrySelectNmxCounters; $qrySelectAllNmxCounters; $qryUpdateNmxCounter; $qryAddNmxStack; $qrySelectNmxStacks; $qryUpdateNmxStack;
$qryAddNmxGame; $qrySelectNmxGame; $qryUpdateNmxGame;
$qryLogMessage; $qryTidyLog;

//Global variables
$tbP1NewPlyrName; $tbP1NewGameRef; $tbP1OldGameRef;
$tbP2NewPlyrName; $tbP2NewGameRef; $tbP2OldGameRef;

//for message logging
$callString;
require	"Functions3.inc";

function fnNegaMax($gameKey,$maxDepth,$currentDepth) {
	fnLogMessageToDb("Start fnNegaMax. GK=" . $gameKey . " MD=" . $maxDepth . " CD=" . $currentDepth);
	
	//the response from this function will be returned in this array (unless an error is found)
	$returnArray=array();
	
	//find out if gameKey is GameRecId or Nmx hash key
	if (strlen($gameKey)<20) {
		$gameRecID=$gameKey; }
	else {
		$gameRecID = 0;
		$hashKey = $gameKey; }

	//get the relevant game, stacks and counters records
	if ($gameRecID>0) {
		//get game record using GameRecID
		if ($logLevel>1){fnLogMessageToDb("(fnNegaMax) get game record using GameRecID");}
		$gameRow = fnQrySelectGameByID($gameRecID);
		if (is_string($gameRow)) {
			$errCode = "NMX-1";
			$errMsg = $gameRow; 
			if ($logLevel>1){ fnLogMessageToDb ($errCode.$errMsg); } }
	}
	else {
		 if ($logLevel>1){ fnLogMessageToDb("(fnNegaMax) get game record using hashKey");}
		$gameRow = fnQrySelectNmxGame($hashKey);
		if (is_string($gameRow)) {
			$errCode = "NMX-2";
			$errMsg = $gameRow;	
			if ($logLevel>1){ fnLogMessageToDb ($errCode.$errMsg); } }
	}

	if (strlen($errCode)==0){
		//check if gone to required depth or game is over
		if ($currentDepth==$maxDepth or $gameRow['Winner']>0) {
			 if ($logLevel>1){ fnLogMessageToDb("(fnNegaMax) winner so end of negamax. depth=" . $currentDepth . "/" . $maxDepth . " winner=" . $gameRow['Winner'] ); }
			//score game
			$fnResp=fnEvaluateGame($gameKey, $gameRow);
			if (is_string($fnResp)){
				$errCode="NMX-3";
				$errMsg=$fnResp;
				if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); } }
			else { 		
				//return score and null values for moveNum and movePos
				$returnArray = array($fnResp,-1,-1); }
		}
		//not finished so set up for next step
		else {
			//initialise moveNum, movePos, best move and best score
			$movePos = -1; $moveNum = -1;
			$bestMove = array($moveNum, $movePos);
			$bestScore = -99999;
			
			//get all the possible moves for the game
			$fnResp = fnGetMoves($gameKey, $gameRow);
			if (is_string($fnResp)){
				$errCode="NMX-4";
				$errMsg=$fnResp;
				if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); } }
			else {
				$movesList = $fnResp; 
				//process each of the moves in the list
				if ($logLevel>2){ fnLogMessageToDb("(fnNegaMax) process each of the moves in the list. count=" . count($movesList)); }
				foreach ($movesList as $aMove) {
					//$aMove[0] = $gameKey, [1]=moveNum, [2]=movePos
					$fnResp = fnProcessNmxMove ($aMove[0],$aMove[1],$aMove[2], $gameRow);
					if (substr($fnResp,0,3)=="PNM"){
						$errCode="NMX-5";
						$errMsg=$fnResp;
						if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); }
						break; }
					else {
						//fnProcessNmxMove has returned a new gameKey so use if to recursively call fnNegaMax
						$newGameKey = $fnResp;
						fnLogMessageToDb("(fnNegaMax) Recurive call to fnNegaMax. currentDepth+1=" . $currentDepth+1);
						$fnResp = fnNegaMax($newGameKey,$maxDepth,$currentDepth+1);
						if (is_string($fnResp)) {
							$errCode="NMX-5";
							$errMsg=$fnResp;
							if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); } }
						else {
							$currentScore = -$fnResp[0];
							//update best score and best move
							if ($logLevel>2){ fnLogMessageToDb("(fnNegaMax) check score. bestScore=" . $bestScore . " currentScore=" . $currentScore); }
							if ($currentScore > $bestScore) {
								$bestScore = $currentScore;
								$returnArray[0] = $bestScore;
								$returnArray[1] = $aMove[1]; 
								$returnArray[2] = $aMove[2]; 
								if ($logLevel>2){ fnLogMessageToDb("(fnNegaMax) New best score=" . $returnArray[0] . " new best move=" . $returnArray[1] . "/" . $returnArray[2]); } }
						}
					}
				}
			}
		}
	}
	//finished - return error code or response array
	if (strlen($errCode) > 0) {
		fnLogMessageToDb("fnNegaMax finished. Return error code: " . $errCode . $errMsg);
		return $errCode.$errMsg; }
	else {
		fnLogMessageToDb("fnNegaMax finished. Return bestScore=" . $returnArray[0] . "and bestMove=" . $returnArray[1] . "/" . $returnArray[2]) ;
		return $returnArray; }

}
//End fnNegaMax
function fnEvaluateGame ($gameKey, &$gameRow) {
	fnLogMessageToDb("start fnEvaluateGame GK=" . $gameKey) ;
	/*calcualte the score from the perspective of the last player
	pScore: Position of stacks owned relative to opponent. Score for each stack = Height/((counters)/100)*(stacknum/stackcount)
	rScore: Size of reserve relative to opponent
	sScore: Proportion of stacks owned
	*/
	global $logLevel;
	//find out if gameKey is GameRecId or Nmx hash key
	if (strlen($gameKey)<20) {
		$gameRecID=$gameKey; }
	else {
		$gameRecID = 0;
		$hashKey = $gameKey; }

	//get the relevant game and stacks records
	if ($gameRecID>0) {
			//get stacks records
			if ($logLevel>2){ fnLogMessageToDb("(fnEvaluateGame) get stacks records using GameRef and TurnCount"); }
			$stackRows = fnQrySelectStacks($gameRow['GameRef'], $gameRow['TurnCount']);
			if (is_string($stackRows)) {
				$errCode = "EVG-4";
				$errMsg = $stackRows; 
				if ($logLevel>1){ fnLogMessageToDb ($errCode.$errMsg); } }
	}
	else {
			//get stacks records
			if ($logLevel>2){ fnLogMessageToDb("(fnEvaluateGame) get stacks records using hashKey"); }
			$stackRows = fnQrySelectNmxStacks($hashKey);
			if (is_string($stackRows)) {
				$errCode = "EVG-2";
				$errMsg = $stackRows;
				if ($logLevel>1){ fnLogMessageToDb ($errCode.$errMsg); } }
	}
	//check for errors 
	if (strlen($errCode)==0) {
		//Calculate stack position score
		$pScore = 0; $p1StackCount = 0; $p2StackCount = 0;
		$maxI = count($stackRows);
		//loop through the stacks missing out the first (player 1 reserve) and the last (player 2 reserve)
		for ($i=1; $i<$maxI; $i++) {
			//ignore empty stacks
			if ($stackRows[$i]['Top']>0) {
				//different calcualations for P1 and P2
				if ($stackRows[$i]['Top'] == $gameRow['P1Ref']) {
					$p1StackCount += 1;
					//Score for each stack = Height/((counters)/100)*(stack number/(stackcount-1))
					$stackScore = $stackRows[$i]['StackHeight']/((($gameRow['AreaSize']+2)*2)/100)*($i/($gameRow['AreaSize']-1)); }
				else {
					$p2StackCount += 1;
					//Score for each stack = Height/((counters)/100)*(stack number/(stackcount-1))
					$stackScore = $stackRows[$i]['StackHeight']/((($gameRow['AreaSize']+2)*2)/100)*(($gameRow['AreaSize']-$i+1)/($gameRow['AreaSize']-1)); }
				//the score for stacks belonging to the last player are added to the overall stack score.The opponent's score are deducted
				if ($stackRows[$i]['Top'] == $gameRow['LastPlayer']) {
					$pScore += $stackScore; }
				else {
					$pScore -= $stackScore; }
			}
		}
		//Calculate stack reserve score = (stacks owned by player -  stacks owned by opponent) / (stacks owned by player + stacks owned by opponent) * 100
		if ($gameRow['P1Ref'] == $gameRow['LastPlayer']) {
			$sScore = ($p1StackCount - $p2StackCount) / ($p1StackCount + $p2StackCount) * 100; }
		else {
			$sScore = ($p2StackCount - $p1StackCount) / ($p1StackCount + $p2StackCount) * 100; }
		//Calculate reserve score = (size of player's reserve - size of opponent's reserve) / number of counters * 100 
		if ($gameRow['P1Ref'] == $gameRow['LastPlayer']) {
			$rScore = ($stackRows[0]['StackHeight'] - $stackRows[$gameRow['AreaSize']+1]['StackHeight']) / (($gameRow['AreaSize']+2)*2) * 100; }
		else {
			$rScore = ($stackRows[$gameRow['AreaSize']+1]['StackHeight'] - $stackRows[0]['StackHeight']) / (($gameRow['AreaSize']+2)*2) * 100; }
		//return score
		if ($logLevel>2){ fnLogMessageToDb("fnEvaluateGame ends successfully and returns scores. pS=" . $pScore . " rS=" . $rScore . " sS=" . $sScore);}
		return $pScore + $rScore + $sScore;
	}
	else {
		//errors retrieving records so return error details
		if ($logLevel>2){ fnLogMessageToDb("fnEvaluateGame ends unsuccessfully and returns error");}
		return $errCode.$errMsg; }

}
// End fnEvaluate
function fnProcessNmxMove ($gameKey, $moveNum, $movePos, $gameRow="") {
	fnLogMessageToDb("start fnProcessNmxMove GK=" . $gameKey . " MN=". $moveNum . " MP=" . $movePos );
	global $conn;

	//find out if gameKey is GameRecId or Nmx hash key
	if (strlen($gameKey)<20) {
		$gameRecID=$gameKey; }
	else {
		$gameRecID = 0;
		$hashKey = $gameKey; }

	$errCode = "";
	//get the relevant game, stacks and counters records
	if ($gameRecID>0) {
		if (is_string($gameRow)){
			//get game record using GameRecID
			if ($logLevel>2){ fnLogMessageToDb("get game record using GameRecID");}
			$gameRow = fnQrySelectGameByID($gameRecID);
		}
		if (is_string($gameRow)) {
			$errCode = "PNM-1";
			$errMsg = $gameRow; 
			if ($logLevel>1){ fnLogMessageToDb ($errCode.$errMsg); } }
		else {
			//which player to go next
			if ($gameRow['P1Ref']==$gameRow['LastPlayer']) {
				$nextPlayerRef = $gameRow['P2Ref']; }
			else {$nextPlayerRef = $gameRow['P1Ref']; }
			//get counters records
			if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) get counters records using GameRef and TurnCount"); }
			$countersRows = fnQrySelectAllCounters($gameRow['GameRef'], $gameRow['TurnCount']);
			if (is_string($countersRows)) {
				$errCode = "PNM-3";
				$errMsg = $countersRows;
				if ($logLevel>1){ fnLogMessageToDb ($errCode.$errMsg); } }
			else {
				//get stacks records
				if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) get stacks records using GameRef and TurnCount"); }
				$stackRows = fnQrySelectStacks($gameRow['GameRef'], $gameRow['TurnCount']);
				if (is_string($stackRows)) {
					$errCode = "PNM-2";
					$errMsg = $stackRows; 
					if ($logLevel>1){ fnLogMessageToDb ($errCode.$errMsg); } }
			}
		}
	} 
	else {
		if (is_string($gameRow)) {
			//get the relevant game, stacks and counters records using hash key
			if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) get game record using hashKey"); }
			$gameRow = fnQrySelectNmxGame($hashKey);
		}
		if (is_string($gameRow)) {
			$errCode = "PNM-4";
			$errMsg = $gameRow;	
			if ($logLevel>1){ fnLogMessageToDb ($errCode.$errMsg); } }
		else {
			//which player to go next
			if ($gameRow['P1Ref']==$gameRow['LastPlayer']) {
				$nextPlayerRef = $gameRow['P2Ref']; }
			else {
				$nextPlayerRef = $gameRow['P1Ref']; }			
			//get counters records
			if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) get counters records using hashKey"); }
			$countersRows = fnQrySelectAllNmxCounters($hashKey);
			if (is_string($countersRows)) {
				$errCode = "PNM-6";
				$errMsg = $countersRows; 
				if ($logLevel>1){ fnLogMessageToDb ($errCode.$errMsg); } }
			else {
				//get stacks records
				if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) get stacks records using hashKey"); }
				$stackRows = fnQrySelectNmxStacks($hashKey);
				if (is_string($stackRows)) {
					$errCode = "PNM-5";
					$errMsg = $stackRows;
					if ($logLevel>1){ fnLogMessageToDb ($errCode.$errMsg); } }
			}
		}
	}	
	//check for errors
	if (strlen($errCode)>0) {
		return $errCode.$errMsg; }
	
	//calculate hash key for next move
	$newHashKey="";
	$maxI = count($countersRows);
	for ($i=0; $i<$maxI; $i++) {
		if ($countersRows[$i]['PlayerRef'] == $gameRow['P1Ref']) {
			$player1or2 = "1"; } 	
		else { $player1or2 = "2"; }
		$newHashKey .= $player1or2 . $countersRows[$i]['StackNum'] . $countersRows[$i]['CounterHeight']; }
	if ( $gameRow['P1Ref']==$gameRow['LastPlayer'] ) {
		$newHashKey .= "2" . $moveNum . $movePos;}
	else {$newHashKey .= "1" . $moveNum . $movePos;}
	if ($logLevel>1){ fnLogMessageToDb("(fnProcessNmxMove) new hash key is".$newHashKey); }
	
	//see if a Nmx game exists for the new hash key
	if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) see if a Nmx game exists for the new hash key"); }
	$nmxGameRow = fnQrySelectNmxGame($newHashKey);
	if (is_string($nmxGameRow)) {
		if (stripos($nmxGameRow,"not found")===FALSE) {
			//an error that is not record not found    
			$errCode = "PNM-7";
			$errMsg = $nmxGameRow; 
			if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); } }
		else {
			//record not found for new hash key so validate the move, copy records to new Nmx records using the new hash key and then perform the move
			
			if ($gameRecID>0){
				//validate play function for ordinary records
				if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) call validate play function for ordinary records"); }
				$fnResp = fnValidatePlay($gameRow['GameRef'], $nextPlayerRef, $movePos, $moveNum, "N"); 
				if (strlen($fnResp["errCode"])>0) {
					$errCode = "PNM-8";
					$errMsg = $fnResp["errCode"].$fnResp["errMsg"];	
					if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); } }
				else {
					//begin database transaction
					if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) begin database transaction"); }
					$conn->beginTransaction();
					$logMsgs=array("(fnProcessNmxMove) rewrite log msgs after rollback");

					//copy ordinary records to nmx records
					if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) copy ordinary game record to nmx records"); }
					$logMsgs[] = "(fnProcessNmxMove) copy ordinary game record to nmx records";
					//convert player refs to 1 or 2
					$p1Ref = 1; $p2Ref = 2;
					if ($gameRow['LastPlayer'] == $gameRow['P1Ref']) {$lastPlayerRef = $p1Ref;} else {$lastPlayerRef = $p2Ref;} 
					if ($gameRow['Winner'] == $gameRow['P1Ref']) {
						$winner = $p1Ref;} 
					elseif ($gameRow['Winner'] == $gameRow['P2Ref']) {
						$winner = $p2Ref;}
					else {$winner="";}
					//hash key for copied records
					$copyHashKey = substr($newHashKey,0,-3) . "000";
					$fnResp = fnQryAddNmxGame ($newHashKey, $gameRow['GameRef'], $p1Ref, $p2Ref, $lastPlayerRef, $gameRow['AreaSize'], $winner, $gameRow['TurnCount'], $gameRow['TurnCountVer']); 
					if (strlen($fnResp)>0) {
						$errCode = "PNM-A";
						$errMsg = $fnResp; 
						if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); }
						$logMsgs[] = $errCode.$errMsg; }
					else {
						//copy counter records
						if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) copy ordinary counter records to nmx"); }
						$logMsgs[] = "(fnProcessNmxMove) copy ordinary counter records to nmx"; 
						$maxI = count($countersRows);
						for ($i=0; $i<$maxI; $i++) {
							//convert player refs to 1 or 2
							if ($countersRows[$i]['PlayerRef']==$gameRow['P1Ref']) {$playerRef = $p1Ref;} else {$playerRef = $p2Ref;} 
							$fnResp = fnQryAddNmxCounter($newHashKey, $countersRows[$i]['GameRef'], $countersRows[$i]['StackNum'], $playerRef, $countersRows[$i]['CounterHeight'], $countersRows[$i]['TurnCount']);
							if (strlen($fnResp)>0) {
								$errCode = "PNM-B";
								$errMsg = $fnResp;
								if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); }
								$logMsgs[] = $errCode.$errMsg;
								break; }
						}
					}
					if (strlen($errCode)==0) {
						//copy stacks records
						if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) copy ordinary stacks records to nmx"); }
						$logMsgs[] = "(fnProcessNmxMove) copy ordinary stacks records to nmx";
						$maxI = count($stackRows);
						for ($i=0; $i<$maxI; $i++) {
							//convert player refs to 1 or 2
							if ($stackRows[$i]['Top']==$gameRow['P1Ref']) {$top = $p1Ref;} 
							elseif ($stackRows[$i]['Top']==$gameRow['P2Ref']){$top = $p2Ref;} 
							else {$top = 0;}
							$fnResp = fnQryAddNmxStack($newHashKey, $stackRows[$i]['GameRef'], $stackRows[$i]['StackNum'], $stackRows[$i]['StackHeight'], $top, $stackRows[$i]['TurnCount']);
							if (strlen($fnResp)>0) {
								$errCode = "PNM-C";
								$errMsg = $fnResp;
								if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); }
								$logMsgs[] = $errCode.$errMsg;
								break; }
						}
					}
					//finished copying records so check if any errors occurred
					if (strlen($errCode)>0) {
						//errors so rollback the updates
						$conn->rollback(); 
						foreach ($logMsgs as $msgs) {fnLogMessageToDb($msgs);}
						if ($logLevel>2){ fnLogMessageToDb ("(fnProcessNmxMove) Process Move copy ordinary records to nmx - Rollback"); } }
					else {
						//no errors so commit updates
						$conn->commit(); 
						if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) Process Move copy ordinary records to nmx - commit"); }				
					}
				} //end of validating play for ordinary records and copying them to nmx
			} //end of what to do with ordinary records
			else {
				//validate play function for Nmx records
				if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) validate play function for Nmx records"); }
				$fnResp = fnValidateNmxPlay($hashKey, $nextPlayerRef, $moveNum, $movePos);
				if (strlen($fnResp)>0){
					$errCode = "PNM-9";
					$errMsg = $fnResp; 
					if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); } }
				else {
					//copy nmx records to new Nmx records
					//begin database transaction
					if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) begin database transaction"); }
					$conn->beginTransaction();
					$logMsgs=array("(fnProcessNmxMove) rewrite log msgs after rollback");

					//copy nmx records to nmx records
					if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) copy nmx game record to nmx records"); }
					$logMsgs[] = "(fnProcessNmxMove) copy nmx game record to nmx records";
					//convert player refs to 1 or 2
					$p1Ref = 1; $p2Ref = 2;
					if ($gameRow['LastPlayer'] == $gameRow['P1Ref']) {$lastPlayerRef = $p1Ref;} else {$lastPlayerRef = $p2Ref;} 
					if ($gameRow['Winner'] == $gameRow['P1Ref']) {$winner = $p1Ref;} 
					elseif ($gameRow['Winner'] == $gameRow['P2Ref']) {$winner = $p2Ref;}
					else {$winner = 0;}
					$fnResp = fnQryAddNmxGame ($newHashKey, $gameRow['GameRef'], $p1Ref, $p2Ref, $lastPlayerRef, $gameRow['AreaSize'], $winner,$gameRow['TurnCount'],$gameRow['TurnCountVer']); 
					if (strlen($fnResp)>0) {
						$errCode = "PNM-E";
						$errMsg = $fnResp; 
						if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); }
						$logMsgs[] = $errCode.$errMsg; }
					else {
						//copy counter records
						if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) copy nmx counter records to nmx"); }
						$logMsgs[] = "(fnProcessNmxMove) copy nmx counter records to nmx"; 
						$maxI = count($countersRows);
						for ($i=0; $i<$maxI; $i++) {
							//convert player refs to 1 or 2
							if ($countersRows[$i]['PlayerRef']==$gameRow['P1Ref']) {$playerRef = $p1Ref;} else {$playerRef = $p2Ref;} 
							$fnResp = fnQryAddNmxCounter($newHashKey, $countersRows[$i]['GameRef'], $countersRows[$i]['StackNum'], $playerRef, $countersRows[$i]['CounterHeight'], $countersRows[$i]['TurnCount']);
							if (strlen($fnResp)>0) {
								$errCode = "PNM-F";
								$errMsg = $fnResp;
								if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); }
								$logMsgs[] = $errCode.$errMsg;
								break; }
						}
					}
					if (strlen($errCode)==0) {
						//copy stacks records
						if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) copy nmx stacks records to nmx"); }
						$logMsgs[] = "(fnProcessNmxMove) copy nmx stacks records to nmx";
						$maxI = count($stackRows);
						for ($i=0; $i<$maxI; $i++) {
							$fnResp = fnQryAddNmxStack($newHashKey, $stackRows[$i]['GameRef'], $stackRows[$i]['StackNum'], $stackRows[$i]['StackHeight'], $stackRows[$i]['Top'], $stackRows[$i]['TurnCount']);
							if (strlen($fnResp)>0) {
								$errCode = "PNM-G";
								$errMsg = $fnResp;
								if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); }
								$logMsgs[] = $errCode.$errMsg;
								break; }
						}
					}
					//fininshed copying records so check if any errors occurred
					if (strlen($errCode)>0) {
						//errors so rollback the updates
						$conn->rollback(); 
						foreach ($logMsgs as $msgs) {fnLogMessageToDb($msgs);}
						if ($logLevel>2){ fnLogMessageToDb ("(fnProcessNmxMove) Process Move copy nmx records to nmx - Rollback"); } }
					else {
						//no errors so commit updates
						$conn->commit(); 
						if ($logLevel>2){ fnLogMessageToDb("(fnProcessNmxMove) Process Move copy nmx records to nmx - commit");	}				
					}
				} //end of validating play for nmx records and copying them to new nmx records
			}
		}
		//if there have been no errors then next thing is to perform move otherwise exit
		if (strlen($errCode)>0) {
			//errors so exit
			if ($logLevel>1){ fnLogMessageToDb("fnProcessNmxMove end. Unsuccessful. Return error code: ". $errCode.$errMsg); }
			return $errCode.$errMsg; }
		else {
			//no errors so do nmx move
			$fnResp = fnMakeNmxMove($newHashKey,$moveNum,$movePos);
			//** check for error being returned from fnMakeNmxMove **
			if (strlen($fnResp)>0) {
				$errCode = "PNM-D";
				$errMsg = $fnResp;
				if ($logLevel>1){ fnLogMessageToDb("fnProcessNmxMove end. Failed move. Return error code: ". $errCode.$errMsg ); }
				return $errCode.$errMsg; } 
			else {
				if ($logLevel>2){ fnLogMessageToDb("fnProcessNmxMove end. Successful move. Return new hash key"); }
				return $newHashKey;
			}
		}
	} //end of what happens if nmx records are not found for new hash key
	else {
		//nmx record found for new hash key so no need to perform the move. Just return new hash key
		fnLogMessageToDb("fnProcessNmxMove end. nmx record found for new hash key so no need to perform the move. Just return new hash key");
		return $newHashKey;
	}

}
//End fnProcessNmxMove
function fnMakeNmxMove($newHashKey,$moveNum,$movePos) {
	global $conn, $logLevel;
	fnLogMessageToDb("start fnMakeNmxMove NHK=" . $newHashKey . " MN=" . $moveNum . " MP=" . $movePos);

	//Move a player's counters either out of the reserve or across the playing area
	$errMsg = ""; $errCode = "";

	//begin database transaction
	if ($logLevel>1){ fnLogMessageToDb("(fnMakeNmxMove) begin database transaction >" . $newHashKey . "<"); }
	$conn->beginTransaction();
	$logMsgs=array("(fnMakeNmxMove) rewrite log msgs after rollback");

	$gameRow = fnQrySelectNmxGame($newHashKey);
	if (is_string($gameRow)) {
		$errMsg = "Game " . $newHashKey . " not found";
		$errCode = "MNM-1";
		if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); }
		$logMsgs[] = $errCode.$errMsg; }
	else {
		//"get stacks";
		$stackRows = fnQrySelectNmxStacks($newHashKey);
		if (is_string($stackRows)) {
			$errMsg = $stackRows;
			$errCode = "MNM-2";
			if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); }
			$logMsgs[] = $errCode.$errMsg; }
	}
	if (strlen($errCode)==0) {
		if ($movePos == 0) {
			//Process move where player is using their reserve ";
			if ($logLevel>2){ fnLogMessageToDb("(fnMakeNmxMove) Process move where player is using their reserve"); }
			$logMsgs[] = "(fnMakeNmxMove) Process move where player is using their reserve";
			//check whose turn it is and adjust game step";
			if ($gameRow['LastPlayer'] == $gameRow['P1Ref']) {
				//player 2's move;
				if ($logLevel>2){ fnLogMessageToDb("player 2's move"); }
				$logMsgs[] = "player 2's move";
				$stackNum = $gameRow['AreaSize'] + 1;
				$playerRef = $gameRow['P2Ref'];}
			else {
				// player 1's move";
				if ($logLevel>2){ fnLogMessageToDb("player 1's move");}
				$logMsgs[] = "player 1's move";
				$stackNum = 0;
				$playerRef = $gameRow['P1Ref']; }
			//."b. Subtract Move Num from the height of player X reserve";
			$stackRows[$stackNum]['StackHeight'] = $stackRows[$stackNum]['StackHeight'] - $moveNum;
			$stackRows[$stackNum][0] = "Y"; //mark for update

			//Reset the reserve to match the number of counters that remain by moving the Layer records that are no longer in the reserve to the first step in the playing area";
			if ($logLevel>2){ fnLogMessageToDb("(fnMakeNmxMove) Reset the reserve to match the number of counters that remain");}
			$logMsgs[] = "(fnMakeNmxMove) Reset the reserve to match the number of counters that remain";
			$countersRows = fnQrySelectNmxCounters($newHashKey,$stackNum);
			if (is_string($countersRows)) {
				$errMsg = "Counter records not found. Fatal error";
				$errCode = "MNM-3";
				if ($logLevel>1){ fnLogMessageToDb($errCode.$errMsg); }
				$logMsgs[] = $errCode.$errMsg; }
			else {
				//move the counter forward by updating the StepNum;
				if ($logLevel>2){ fnLogMessageToDb("(fnMakeNmxMove) move the counter forward by updating the StepNum"); }
				$logMsgs[] = "(fnMakeNmxMove) move the counter forward by updating the StepNum";
				for ($i = $stackRows[$stackNum]['StackHeight'] + 1; $i <= $stackRows[$stackNum]['StackHeight'] + $moveNum; $i++) {   
					if ($stackNum == 0) {
						//stackNum = 0 i.e. player 1";
						if ($logLevel>1){ fnLogMessageToDb("(fnMakeNmxMove) move counter " . $countersRows[$i - 1]['CounterRecID'] . "for player 1"); }
						$logMsgs[] = "(fnMakeNmxMove) move counter " . $countersRows[$i - 1]['CounterRecID'] . "for player 1";
						$countersRows[$i - 1]['StackNum'] = $stackNum + 1; 
						$countersRows[$i - 1][0] = "Y"; //mark row for update
						if ($logLevel>2){ fnLogMessageToDb("(fnMakeNmxMove) update stack " . $stackRows[$stackNum - 1]['StackRecID'] . "for player 1"); }
						$logMsgs[] = "(fnMakeNmxMove) update stack " . $stackRows[$stackNum - 1]['StackRecID'] . "for player 1";
						$stackRows[$stackNum + 1]['Top'] = $gameRow['P1Ref'];   
						$stackRows[$stackNum + 1][0] = "Y";} //mark row for update 
					else {
						//stackNum != 0 i.e. player 2";
						if ($logLevel>2){ fnLogMessageToDb("(fnMakeNmxMove) move counter " . $countersRows[$i - 1]['CounterRecID'] . "for player 2"); }
						$logMsgs[] = "(fnMakeNmxMove) move counter " . $countersRows[$i - 1]['CounterRecID'] . "for player 2";
						$countersRows[$i - 1]['StackNum'] = $stackNum - 1;	
						$countersRows[$i - 1][0] = "Y"; //mark row for update
						if ($logLevel>2){ fnLogMessageToDb("(fnMakeNmxMove) update stack " . $stackRows[$stackNum - 1]['StackRecID'] . "for player 2"); }
						$logMsgs[] = "(fnMakeNmxMove) update stack " . $stackRows[$stackNum - 1]['StackRecID'] . "for player 2";
						$stackRows[$stackNum - 1]['Top'] = $gameRow['P2Ref']; 	
						$stackRows[$stackNum - 1][0] = "Y";} 	//mark row for update 
					//put the counter rec on top of the stack by updating it's height
					$countersRows[$i - 1]['CounterHeight'] = $stackRows[$countersRows[$i-1]['StackNum']]['StackHeight'] + $i - $stackRows[$stackNum]['StackHeight'] ;
				}
				//update the height of the game step;
				if ($logLevel>2){ fnLogMessageToDb("(fnMakeNmxMove) update the height of the game step"); }
				$logMsgs[] = "(fnMakeNmxMove) update the height of the game step";
				if ($stackNum == 0) {
					$stackRows[$stackNum+1]['StackHeight'] += $moveNum;}	
				else {
					$stackRows[$stackNum-1]['StackHeight'] += $moveNum;}	
			}
		}
	}
	if (strlen($errCode)==0) {
		//process move in the play area
		if ($movePos > 0) {
			if ($logLevel>2){ fnLogMessageToDb("(fnMakeNmxMove) process move in the play area"); }
			$logMsgs[] = "(fnMakeNmxMove) process move in the play area";
			//check whose turn it is and adjust game step 
			if ($gameRow['LastPlayer'] == $gameRow['P1Ref']) {	
				//player 2's move
				$stackNum = $gameRow['AreaSize'] + 1 - $movePos;
				$playerRef = $gameRow['P2Ref']; }
			else {
				//player 1's move
				$stackNum = $movePos;
				$playerRef = $gameRow['P1Ref']; } 

			//get counter records
			$countersRows = fnQrySelectNmxCounters($newHashKey, $stackNum);
			if (is_string($countersRows)) {
				$errMsg = "Counter records not found. Fatal error";
				$errCode = "MNM-4";
				fnLogMessageToDb($errCode.$errMsg);
				$logMsgs[] = $errCode.$errMsg; }
			else {
				//take one or more counters away from the current step
				fnLogMessageToDb("(fnMakeNmxMove) take one or more counters away from the current step");
				$logMsgs[] = "(fnMakeNmxMove) take one or more counters away from the current step";
				//reduce height of stack by number of counters being moved
				$stackRows[$stackNum]['StackHeight'] -= $moveNum ;
				$stackRows[$stackNum][0] = "Y"; //mark row for update 
				//change top counter	
				if ($stackRows[$stackNum]['StackHeight'] == 0) {
					//set top to zero
					$stackRows[$stackNum]['Top'] = 0; }
				else {
					//set top to a number > zero
					$stackRows[$stackNum]['Top'] = $countersRows[$stackRows[$stackNum]['StackHeight']-1]['PlayerRef']; }	

				//increase height of next stack, move counters and update top
				fnLogMessageToDb("(fnMakeNmxMove) increase height of next stack, move counters and update top");
				$logMsgs[] = "(fnMakeNmxMove) increase height of next stack, move counters and update top";
				if ($playerRef == $gameRow['P1Ref']) {
					// player 1";
					$stackRows[$stackNum+1][0] = "Y"; //mark row for update 		
					//move counters 
					for ($i = $stackRows[$stackNum]['StackHeight'] + 1; $i <= $stackRows[$stackNum]['StackHeight'] + $moveNum; $i++) {   
					$countersRows[$i-1]['StackNum'] = $stackNum + 1 ; 
					$countersRows[$i-1][0] = "Y"; //mark row for update
					$countersRows[$i-1]['CounterHeight'] = $stackRows[$stackNum+1]['StackHeight'] + $i - $stackRows[$stackNum]['StackHeight'] ; }
					//increase height
					$stackRows[$stackNum+1]['StackHeight'] += $moveNum ;	
					//update top of stack
					$stackRows[$stackNum+1]['Top'] = $gameRow['P1Ref'] ; }
				else {
					// player 2";	
					$stackRows[$stackNum-1][0] = "Y"; //mark row for update 	
					//move counters 
					for ($i = $stackRows[$stackNum]['StackHeight'] + 1; $i <= $stackRows[$stackNum]['StackHeight'] + $moveNum; $i++) {   
						$countersRows[$i-1]['StackNum'] = $stackNum - 1 ; 
						$countersRows[$i-1][0] = "Y"; //mark row for update
						$countersRows[$i-1]['CounterHeight'] = $stackRows[$stackNum-1]['StackHeight'] + $i - $stackRows[$stackNum]['StackHeight'] ; }
					//increase height
					$stackRows[$stackNum-1]['StackHeight'] += $moveNum  ;
					//update top of stack
					$stackRows[$stackNum-1]['Top'] = $gameRow['P2Ref'] ; }

				//If player has reached the far side of the board then all the counters are moved to the players reserve;
				if ($playerRef == $gameRow['P1Ref']) {
					//player 1";
					if ($stackNum+1 == $gameRow['AreaSize']) {	
						//player 1 has reached the far side of the board so ...
						fnLogMessageToDb("(fnMakeNmxMove) player 1 has reached the far side of the board");
						$logMsgs[] = "(fnMakeNmxMove) player 1 has reached the far side of the board";
						//save layer updates
						$maxI = count($countersRows);
						for ($i=0; $i < $maxI; $i++) {
							if ($countersRows[$i][0] == "Y") {
								$fnResp = fnQryUpdateNmxCounters($countersRows[$i]['StackNum'],$countersRows[$i]['PlayerRef'],$countersRows[$i]['CounterHeight'],$countersRows[$i]['CounterRecID'],$countersRows[$i]['TurnCount']);
								if (strlen($fnResp) > 0 ) {
									$errMsg = "Process Move - " . $fnResp;
									$errCode = "MNM-5"; 
									fnLogMessageToDb($errCode.$errMsg);
									$logMsgs[] = $errCode.$errMsg; 
									break;}
							}
						}
						if (strlen($errCode)==0) {
							//select counters records for next game step
							$countersRows = fnQrySelectNmxCounters($newHashKey, $stackNum+1);
							if (is_string($countersRows)) {
								$errMsg = "Counter records not found. Fatal error";
								$errCode = "MNM-6";
								fnLogMessageToDb($errCode.$errMsg);
								$logMsgs[] = $errCode.$errMsg; }
							else {
								//move counters and make them belong to player 1
								for ($i=0; $i<=$stackRows[$stackNum+1]['StackHeight'] - 1; $i++) {		
									$countersRows[$i]['CounterHeight']= $stackRows[0]['StackHeight'] + 1 + $i;	
									$countersRows[$i]['StackNum'] = 0; 
									$countersRows[$i]['PlayerRef'] = $gameRow['P1Ref'];	
									$countersRows[$i][0] = "Y"; } 	//flag for update 			
								//increase height of reserve
								$stackRows[0]['StackHeight'] += $stackRows[$stackNum+1]['StackHeight'];
								$stackRows[0][0] = "Y";  //flag for update 				
								//reset height of far side of board
								$stackRows[$stackNum+1]['StackHeight'] = 0;
								$stackRows[$stackNum+1]['Top'] = 0; 	
								$stackRows[$stackNum+1][0] = "Y";  //flag for update 
							}
						}
					}
				}
				else {
					//player 2";
					if ($stackNum-1 == 1) {
						//player 2 has read the far side of the board so ...";
						fnLogMessageToDb("(fnMakeNmxMove) player 2 has reached the far side of the board");
						$logMsgs[] = "(fnMakeNmxMove) player 2 has reached the far side of the board";
						//save layer updates
						$maxI = count($countersRows);
						for ($i=0; $i < $maxI; $i++) {
							if ($countersRows[$i][0] == "Y") {
								$fnResp = fnQryUpdateNmxCounters($countersRows[$i]['StackNum'],$countersRows[$i]['PlayerRef'],$countersRows[$i]['CounterHeight'],$countersRows[$i]['CounterRecID'],$countersRows[$i]['TurnCount']);
								if (strlen($fnResp) > 0 ) {
									$errMsg = $fnResp;
									$errCode = "MNM-7"; 
									fnLogMessageToDb($errCode.$errMsg);
									$logMsgs[] = $errCode.$errMsg;
									break; }
							}
						}
						if (strlen($errCode)==0) {
							//select layer records for next game step";		
							$countersRows = fnQrySelectNmxCounters($newHashKey, $stackNum-1,0);
							if (is_string($countersRows)) {
								$errMsg = "Counter records not found. Fatal error";
								$errCode = "MNM-8";
								fnLogMessageToDb($errCode.$errMsg);
								$logMsgs[] = $errCode.$errMsg; }
							else {
								//move counters and make them belong to player 2
								for ($i= 0; $i<= $stackRows[$stackNum-1]['StackHeight'] - 1; $i++) { 
									$countersRows[$i]['CounterHeight'] = $stackRows[$gameRow['AreaSize']+1]['StackHeight'] + 1 + $i; 	
									$countersRows[$i]['StackNum'] = $gameRow['AreaSize'] + 1;
									$countersRows[$i]['PlayerRef'] = $gameRow['P2Ref'];	
									$countersRows[$i][0] = "Y"; } 	//mark for update
								//increase height of reserve
								$stackRows[$gameRow['AreaSize']+1]['StackHeight'] += $stackRows[$stackNum-1]['StackHeight'];
								$stackRows[$gameRow['AreaSize']+1][0] = "Y";  //flag for update 			
								//reset height of far side of board
								$stackRows[$stackNum-1]['StackHeight'] = 0;	
								$stackRows[$stackNum-1]['Top'] = 0;	
								$stackRows[$stackNum-1][0] = "Y";	//mark for update
							}
						}
					}
				}
			}
		}
	}
	if (strlen($errCode)==0) {
		//check to see if the next player has any moves available
		if ($playerRef == $gameRow['P2Ref']) {
			/*
			//player 2 has moved so check if player 1 has lost
			fnLogMessageToDb("player 2 has moved so check if player 1 has lost");
			$logMsgs[] = "player 2 has moved so check if player 1 has lost";
			if (fnCheckLoser($gameRow['P1Ref'], $stackRows)) {
				$gameRow['Winner'] = $playerRef; $gameRow['LastPlayer'] = $gameRow['P2Ref'];
				$errMsg = "Player " . $playerRef . " has won the game."; 
				$errCode = "MNM-9"; 
				fnLogMessageToDb($errCode.$errMsg);
				$logMsgs[] = $errCode.$errMsg;  }
			else {
			*/
				//player 2 has moved but not won so check if player 1 has any moves";
				$anyMoves = False;
				if ($stackRows[0]['StackHeight'] > 0) {		
					$anyMoves = True;}
				else {
					for ($i = 1; $i<=$gameRow['AreaSize']-1; $i++) {	
						if ($stackRows[$i]['StackHeight'] >= $stackRows[$i+1]['StackHeight'] And $stackRows[$i]['Top'] == $gameRow['P1Ref']) {
							$anyMoves = True;
							break; }
					}
				}
				if ($anyMoves) {
					//player 1 has moves available so switch turns";
					fnLogMessageToDb("(fnMakeNmxMove) set last player to player 2 - " . $gameRow['P2Ref']) ;
					$logMsgs[] = "(fnMakeNmxMove) set last player to player 2 - " . $gameRow['P2Ref'] ;
					$gameRow['LastPlayer'] = $gameRow['P2Ref'];}
				/*
				else {
					$errMsg = "Player " . $gameRow['P1Ref'] . " has no moves available. Miss a turn."; 
					$errCode = "MNM-A";
					fnLogMessageToDb($errCode.$errMsg);
					$logMsgs[] = $errCode.$errMsg;	}
				*/
			//}
		}
		else {
			/*
			//player 1 has moved so check if player 2 has lost";
			fnLogMessageToDb("player 1 has moved so check if player 2 has lost");
			$logMsgs[] = "player 1 has moved so check if player 2 has lost";
			if (fnCheckLoser($gameRow['P2Ref'], $stackRows)) {
				$gameRow['Winner'] = $playerRef; $gameRow['LastPlayer'] = $gameRow['P1Ref'];
				$errMsg = "Player " . $playerRef . " has won the game."; 
				$errCode = "MNM-B"; 
				fnLogMessageToDb($errCode.$errMsg);
				$logMsgs[] = $errCode.$errMsg; }
			else {
			*/
				//player 1 has moved but not won so check if player 2 has any moves";
				$anyMoves = False;
				if ($stackRows[$gameRow['AreaSize']+1]['StackHeight'] > 0) {
					$anyMoves = True; }
				else {
					for ($i=$gameRow['AreaSize']; $i>=2; $i--) { 
						if ($stackRows[$i]['StackHeight'] >= $stackRows[$i-1]['StackHeight'] And $stackRows[$i]['Top'] == $gameRow['P2Ref']) {
							$anyMoves = True;
							break; }
					}
				}
				if ($anyMoves) {
					//player 2 has moves available so switch turns";
					fnLogMessageToDb("(fnMakeNmxMove) set last player to player 1 - " . $gameRow['P1Ref']) ;
					$logMsgs[] = "(fnMakeNmxMove) set last player to player 1 - " . $gameRow['P1Ref'] ;
					$gameRow['LastPlayer'] = $gameRow['P1Ref']; }
				/*
				else {
					$errMsg = "Player " . $gameRow['P2Ref'] . " has no moves available. Miss a turn."; 
					$errCode = "MNM-C"; 
					fnLogMessageToDb($errCode.$errMsg);
					$logMsgs[] = $errCode.$errMsg; }
				*/
			//}
		}
	}

	if (strlen($errCode)==0) {
		//increment turn count
		$gameRow['TurnCount'] += 1;	
		fnLogMessageToDb("(fnMakeNmxMove) incremented turn count to " . $gameRow['TurnCount']) ;
		$logMsgs[] = "(fnMakeNmxMove) incremented turn count to " . $gameRow['TurnCount'];

		//save counter recs
		fnLogMessageToDb("(fnMakeNmxMove) updating counters") ;
		$logMsgs[] = "(fnMakeNmxMove) updating counters";
		$maxI = count($countersRows);
		fnLogMessageToDb("(fnMakeNmxMove) maxI=".$maxI);
		$logMsgs[] = "(fnMakeNmxMove) maxI=".$maxI;
		for ($i=0; $i<$maxI; $i++) {
			fnLogMessageToDb("(fnMakeNmxMove) counters update flag=".$countersRows[$i][0]."<" );
			$logMsgs[] = "(fnMakeNmxMove) counters update flag=".$countersRows[$i][0]."<" ;
			if ($countersRows[$i][0] == "Y") {
				$fnResp = fnQryUpdateNmxCounters($countersRows[$i]['StackNum'],$countersRows[$i]['PlayerRef'],$countersRows[$i]['CounterHeight'],$countersRows[$i]['CounterRecID'],$gameRow['TurnCount']);
				if (strlen($fnResp) > 0) {
					$errCode = "MNM-D";
					$errMsg = $fnResp; 
					fnLogMessageToDb($errCode.$errMsg);
					$logMsgs[] = $errCode.$errMsg;
					break; }
			}
		}
	}
	
	if (strlen($errCode)==0) {
		//save game rec
		fnLogMessageToDb("(fnMakeNmxMove) saving game. LP=" . $gameRow['LastPlayer'] . " TC=". $gameRow['TurnCount']) ;
		$logMsgs[] = "(fnMakeNmxMove) saving game. LP=" . $gameRow['LastPlayer'] . " TC=". $gameRow['TurnCount'];
		$fnResp = fnQryUpdateNmxGame($gameRow['HashKey'],$gameRow['P1Ref'],$gameRow['P2Ref'],$gameRow['LastPlayer'],$gameRow['AreaSize'],$gameRow['Winner'],$gameRow['TurnCount']);
		if (strlen($fnResp) > 0) {
			$errCode = "MNM-E";
			$errMsg = $fnResp; 
			fnLogMessageToDb($errCode.$errMsg);
			$logMsgs[] = $errCode.$errMsg; }
		else {
			//save stack recs
			fnLogMessageToDb("(fnMakeNmxMove) saving stacks") ;
			$logMsgs[] = "(fnMakeNmxMove) saving stacks";
			$maxI = count($stackRows);
			for ($i=0; $i<$maxI; $i++) {
				if ($stackRows[$i][0] == "Y") {
					$fnResp = fnQryUpdateNmxStack($stackRows[$i]['StackNum'],$stackRows[$i]['StackHeight'],$stackRows[$i]['Top'],$stackRows[$i]['StackRecID'],$gameRow['TurnCount']); 
					if (strlen($fnResp) > 0) {
						$errCode = "MNM-F";
						$errMsg = $fnResp; 
						fnLogMessageToDb($errCode.$errMsg);
						$logMsgs[] = $errCode.$errMsg; 
						break; }
				}
			}
		}
	}
	//end database transaction
	if (strlen($errCode)>0) { 
		//an error has occurred rollback any database updates
		$conn->rollback(); 
		foreach ($logMsgs as $msgs) {fnLogMessageToDb($msgs);}
		fnLogMessageToDb ("(fnMakeNmxMove) Make Nmx Move - Rollback"); }
	else {
		$conn->commit(); 
		fnLogMessageToDb ("(fnMakeNmxMove) Make Nmx Move - Commit"); }
	fnLogMessageToDb ("fnMakeNmxMove end. Return error code"); 	
	return $errCode.$errMsg; 

}
//End fnMakeNmxMove
function fnValidateNmxPlay ($hashKey,$nextPlayerRef,$moveNum,$movePos) {
	fnLogMessageToDb("start fnValidateNmxPlay HK=" . $hashKey . " NP=" . $nextPlayerRef . " MN=" . $moveNum . " MP=" . $movePos);
	$errMsg = ""; $errCode = "";

	//check play against nmx records

	//get game record
	$gameRow = fnQrySelectNmxGame($hashKey); 
	/* if (is_string($hashKey)) {
		$errMsg = "Game " . $gameRef . " not found or duplicate";
		$errCode = "VNP-1";
	 	fnLogMessageToDb($errCode.$errMsg); }*/
	if (is_string($gameRow)) {
		$errMsg = "(fnValidateNmxPlay) " . $gameRow;
		$errCode = "VNP-1";
		fnLogMessageToDb($errCode.$errMsg); }
	elseif ($gameRow['Winner'] != 0){
		$errMsg = "(fnValidateNmxPlay) Game " . $gameRef . " has already been won";
		$errCode = "VNP-2";
		fnLogMessageToDb($errCode.$errMsg); }
	else {
		//1. Check it is the right player taking a turn.	
		if ($gameRow['LastPlayer'] == $nextPlayerRef) {
			$errMsg = "(fnValidateNmxPlay) Not player " . $nextPlayerRef . "'s turn";
			$errCode = "VNP-4";
			fnLogMessageToDb($errCode.$errMsg); }
		else {
			//move position must not be blank or greater than areaSize
			if ($movePos > $gameRow['AreaSize']) {
				$errMsg = "(fnValidateNmxPlay) Player " . $nextPlayerRef . ": Invalid move position";
				$errCode = "VNP-5";
				fnLogMessageToDb($errCode.$errMsg); }
			else {
				//get stack records
				$stackRows = fnQrySelectNmxStacks($hashKey);
				if (is_string($stackRows)) {
					$errMsg = "(fnValidateNmxPlay) Stack not found";
					$errCode = "VNP-6";
					fnLogMessageToDb($errCode.$errMsg); }			
			}
		}
	}
	
	if (strlen($errCode)==0) {
		//the move count must be less than or equal to the stack height
		if ($nextPlayerRef == 1) {
			if ($moveNum > $stackRows[$movePos]['StackHeight']) {
					$errMsg = "(fnValidateNmxPlay) Player 1: Invalid move count";
					$errCode = "VNP-7";
					fnLogMessageToDb($errCode.$errMsg); }
			}
		else {
			if ($moveNum > $stackRows[$gameRow['AreaSize'] + 1 - $movePos]['StackHeight']){
				$errMsg = "(fnValidateNmxPlay) Player 2: Invalid move count";
				$errCode = "VNP-8";
				fnLogMessageToDb($errCode.$errMsg); }
		}
	}

	if (strlen($errCode)==0) {
		if ($movePos !== 0) {
			//the move position is not for the reserve so ...
			if ($nextPlayerRef == 1) {
				//... the top counter must belong to player 1
				if ($stackRows[$movePos]['Top'] <> $gameRow['P1Ref']) {
					$errMsg = "(fnValidateNmxPlay) Player 1: Invalid move position: " . $movePos;
					$errCode = "VNP-9";
					fnLogMessageToDb($errCode.$errMsg); }
				//... and the next stack must not be higher than the current one less the move count plus 1 (this limits how many counters can be moved)
				elseif ($stackRows[$movePos+1]['StackHeight'] > $stackRows[$movePos]['StackHeight'] - $moveNum + 1 ) {
					$errMsg = "(fnValidateNmxPlay) Player 1: Invalid move position. Move pos=" . $movePos;
					$errCode = "VNP-A";
					fnLogMessageToDb($errCode.$errMsg); }
			}
			else {
				//... the top counter must belong to player 2
				if ($stackRows[$gameRow['AreaSize']+1 - $movePos]['Top'] <> $gameRow['P2Ref']) {
					$errMsg = "(fnValidateNmxPlay) Player 2: Invalid move position: " . $movePos;
					$errCode = "VNP-B";
					fnLogMessageToDb($errCode.$errMsg); }
				//... and the next stack must not be higher than the current one less the move count plus 1 (this limits how many counters can be moved) 
				elseif ($stackRows[$gameRow['AreaSize']+1 - $movePos -1]['StackHeight'] > $stackRows[$gameRow['AreaSize']+1 - $movePos]['StackHeight'] - $moveNum + 1) {
					$errMsg = "(fnValidateNmxPlay) Player 2: Invalid move position: " . $movePos;
					$errCode = "VNP-C";
					fnLogMessageToDb($errCode.$errMsg); }
			}
		}
	}
	fnLogMessageToDb("fnValidateNmxPlay end. Return error code");
	return $errCode.$errMsg; 
}
//End fnValidateNmxPlay
function fnValidatePlayerNamePW($playerNamePW) {
	fnLogMessageToDb("Start fnValidatePlayerNamePW"); 
	//separate player name and PIN
	//search for slash
	$inx = strpos($playerNamePW,"/",0); 
	if ($inx == FALSE){
		$errCode = "VP-1";
		$errMsg = "PIN not found - separator missing: ".$playerNamePW;
		fnLogMessageToDb($errCode.$errMsg);
		return array("errCode"=>$errCode, "errMsg"=>$errMsg); }
	$playerName = substr($playerNamePW,0,$inx);
	$password = substr($playerNamePW,$inx+1,strlen($playerNamePW)-$inx);
	//search for player name
	$playerRow =fnQrySelectPlayer($playerName);
	if (is_string($playerRow)) {
		$errCode = "VP-2";
		$errMsg = "Error finding player name record for " . $playerName;
		fnLogMessageToDb($errCode.$errMsg);
		return array("errCode"=>$errCode, "errMsg"=>$errMsg); }
	elseif ($password != $playerRow['Password']){
		$errCode = "VP-3";
		$errMsg = "Player name and\or PIN is incorrect: ".$playerName."/".$password;
		fnLogMessageToDb($errCode.$errMsg);
		return array("errCode"=>$errCode, "errMsg"=>$errMsg); }
	//all good so return player ref
	return $playerRow['PlayerRef'];
	
}
//End fnValidatePlayerNamePW
function fnValidatePlay($tbPOldGameRef,$tbPOldPlyrRef,$movePos,$moveNum,$procMove = "Y") {
	fnLogMessageToDb("start fnValidatePlay");
	$errMsg = ""; $errCode = "";

	/*set up play inputs from player 1 or player 2
	$movePos = $tbPMovePos;
	$moveNum = $tbPMoveCount;*/

	//get game record
	if (strlen($tbPOldGameRef)>0) {
		$gameRef = $tbPOldGameRef;}
	else {
		$errMsg = "Game ref not found in subValidatePlay. Fatal error.";
		$errCode = "VPY-1";
		fnLogMessageToDb($errCode.$errMsg);
		return array("errCode"=>$errCode,"errMsg"=>$errMsg); }

	$gameRow = fnQrySelectGame($gameRef); 
	if (is_string($gameRow)) {
		$errMsg = "Game " . $gameRef . " not found";
		$errCode = "VPY-2";
		fnLogMessageToDb($errCode.$errMsg);
		return array("errCode"=>$errCode,"errMsg"=>$errMsg); }

	if ($gameRow['Winner'] != 0){
		$errMsg = "Game " . $gameRef . " has already been won";
		$errCode = "VPY-3";
		fnLogMessageToDb($errCode.$errMsg);
		return array("errCode"=>$errCode,"errMsg"=>$errMsg); }
		
	if ($tbPOldPlyrRef == $gameRow['P1Ref']) {
		$player1or2 = 1;}
	elseif ($tbPOldPlyrRef == $gameRow['P2Ref']) {
		$player1or2 = 2;}
	else {
		$errMsg = "Incorrect player ".$tbPOldPlyrRef;
		$errCode = "VPY-4";
		fnLogMessageToDb($errCode.$errMsg);
		return array("errCode"=>$errCode,"errMsg"=>$errMsg); }
		
	//1. Check it is the right player taking a turn.
	if ($player1or2 == 1) {
		if ($gameRow['LastPlayer'] == $gameRow['P1Ref']) {
			$errMsg = "Not player 1's turn";
			$errCode = "VPY-H";
			fnLogMessageToDb($errCode.$errMsg);
			return array("errCode"=>$errCode,"errMsg"=>$errMsg); }
	}
	else {
		if ($gameRow['LastPlayer'] == $gameRow['P2Ref']) {
			$errMsg = "Not player 2's turn";
			$errCode = "VPY-5";
			fnLogMessageToDb($errCode.$errMsg);
			return array("errCode"=>$errCode,"errMsg"=>$errMsg); }
	}

	//move position must not be blank or greater than areaSize
	if ($movePos > $gameRow['AreaSize']) {
		$errMsg = "Player " . $player1or2 . ": Invalid move position";
		$errCode = "VPY-7";
		fnLogMessageToDb($errCode.$errMsg);
		return array("errCode"=>$errCode,"errMsg"=>$errMsg); }

	//move num can be blank unless the move position is 0
	if ($moveNum == 0) {
		if ($movePos == 0) {
			$errMsg = "Player " . $player1or2 . ": Invalid move num";
			$errCode = "VPY-8";
			fnLogMessageToDb($errCode.$errMsg);
			return array("errCode"=>$errCode,"errMsg"=>$errMsg); }
		else {
			//not moving reserve so assume move num is 1
			$moveNum = 1; }
	}
	//get stack records
	$stackRows = fnQrySelectStacks($gameRef,0);
	if (is_string($stackRows)) {
		$errMsg = "Stack not found in sub ValidatePlay. Fatal error.(P" . $player1or2 . ")";
		$errCode = "VPY-A";
		fnLogMessageToDb($errCode.$errMsg);
		return array("errCode"=>$errCode,"errMsg"=>$errMsg); }

	
	//the move num must be less than or equal to the stack height
	if ($player1or2 == 1) {
   	if ($moveNum > $stackRows[$movePos]['StackHeight']) {
			$errMsg = "Player 1: Invalid move count";
			$errCode = "VPY-B";
			fnLogMessageToDb($errCode.$errMsg);
			return array("errCode"=>$errCode,"errMsg"=>$errMsg); }
	}
	else {
		if ($moveNum > $stackRows[$gameRow['AreaSize'] + 1 - $movePos]['StackHeight']){
			$errMsg = "Player 2: Invalid move count";
			$errCode = "VPY-C";
			fnLogMessageToDb($errCode.$errMsg);
			return array("errCode"=>$errCode,"errMsg"=>$errMsg); }
	}
	if ($movePos !== 0) {
		//the move position is not for the reserve so ...
		if ($player1or2 == 1) {
			//... the top counter must belong to player 1
			if ($stackRows[$movePos]['Top'] <> $gameRow['P1Ref']) {
				$errMsg = "Player 2: Invalid move position";
				$errCode = "VPY-D";
				fnLogMessageToDb($errCode.$errMsg);
				return array("errCode"=>$errCode,"errMsg"=>$errMsg); }
			//... and the next stack must not be higher than the current one less the move num plus 1 (this limits how many counters can be moved)
			elseif ($stackRows[$movePos+1]['StackHeight'] > $stackRows[$movePos]['StackHeight'] - $moveNum + 1 ) {
				$errMsg = "Player 1: Invalid move position. Move pos=" . $movePos;
				$errCode = "VPY-E";
				fnLogMessageToDb($errCode.$errMsg);
				return array("errCode"=>$errCode,"errMsg"=>$errMsg); }
		}
		else {
			//... the top counter must belong to player 2
			if ($stackRows[$gameRow['AreaSize']+1 - $movePos]['Top'] <> $gameRow['P2Ref']) {
				$errMsg = "Player 2: Invalid move position";
				$errCode = "VPY-F";
				fnLogMessageToDb($errCode.$errMsg);
				return array("errCode"=>$errCode,"errMsg"=>$errMsg); }
			//... and the next stack must not be higher than the current one less the move num plus 1 (this limits how many counters can be moved) 
			elseif ($stackRows[$gameRow['AreaSize']+1 - $movePos -1]['StackHeight'] > $stackRows[$gameRow['AreaSize']+1 - $movePos]['StackHeight'] - $moveNum + 1) {
				$errMsg = "Player 2: Invalid move position";
				$errCode = "VPY-G";
				fnLogMessageToDb($errCode.$errMsg);
				return array("errCode"=>$errCode,"errMsg"=>$errMsg); }
		}
	}
	if ($procMove == "Y") {
		$fnResp = fnProcessMove($movePos, $moveNum, $gameRef, True);
		$errCode = $fnResp["errCode"];
		$errMsg = $fnResp["errMsg"]; }

	return array("errCode"=>$errCode,"errMsg"=>$errMsg); 
}
//End fnValidatePlay
function fnProcessMove ($movePos, $moveNum, $gameRef, $silent) {
	global $conn;
	fnLogMessageToDb("start fnProcessMove");
	//Move a player's counters either out of the reserve or across the playing area
	$errMsg = ""; $errCode = "";
	$errCode2 = ""; $errMsg2 = "";

	//begin database transaction
	$conn->beginTransaction();
	$logMsgs=array("rewrite log msgs after rollback");

	$gameRow = fnQrySelectGame($gameRef);
	if (is_string($gameRow)) {
		$errMsg = "Game " . $gameRef . " not found";
		$errCode = "PMO-1";
		fnLogMessageToDb($errCode.$errMsg);
		//return array("errCode"=>$errCode,"errMsg"=>$errMsg);
		$logMsgs[] = $errCode.$errMsg; }
	else {
		//get stacks
		$stackRows = fnQrySelectStacks($gameRef,0);
		if (is_string($stackRows)) {
			$errMsg = "Game step not found. Fatal error.";
			$errCode = "PMO-2";
			fnLogMessageToDb($errCode.$errMsg);
			//return array("errCode"=>$errCode,"errMsg"=>$errMsg);
			$logMsgs[] = $errCode.$errMsg;	}
	}
	//only continue if there are no errors
	if (strlen($errCode) == 0) {
		if ($movePos == 0) {
			//Process move where player is using their reserve ";
			//check whose turn it is and adjust game step";
			if ($gameRow['LastPlayer'] == $gameRow['P1Ref']) {
				//player 2's move";
				$stackNum = $gameRow['AreaSize'] + 1;
				$playerRef = $gameRow['P2Ref'];}
			else {
				// player 1's move";
				$stackNum = 0;
				$playerRef = $gameRow['P1Ref']; }
			//."b. Subtract Move Num from the height of player X reserve";
			$stackRows[$stackNum]['StackHeight'] = $stackRows[$stackNum]['StackHeight'] - $moveNum;
			$stackRows[$stackNum][0] = "Y"; //mark for update

			//Reset the reserve to match the number of counters that remain by moving the Layer records that are no longer in the reserve to the first step in the playing area";
			$countersRows = fnQrySelectCounters($gameRef,$stackNum,0);
			if (is_string($countersRows)) {
				$errMsg = "Counter records not found. Fatal error";
				$errCode = "PMO-2A";
				fnLogMessageToDb($errCode.$errMsg);
				//return array("errCode"=>$errCode,"errMsg"=>$errMsg); 
				$logMsgs[] = $errCode.$errMsg; }
			else {
				for ($i = $stackRows[$stackNum]['StackHeight'] + 1; $i <= $stackRows[$stackNum]['StackHeight'] + $moveNum; $i++) {   
					//move the counter forward by updating the StepNum";
					if ($stackNum == 0) {
						//stackNum = 0 i.e. player 1";
						$countersRows[$i - 1]['StackNum'] = $stackNum + 1; 
						$countersRows[$i - 1][0] = "Y"; //mark row for update
						$stackRows[$stackNum + 1]['Top'] = $gameRow['P1Ref'];   
						$stackRows[$stackNum + 1][0] = "Y";} //mark row for update 
					else {
						//stackNum != 0 i.e. player 2";
						$countersRows[$i - 1]['StackNum'] = $stackNum - 1;	
						$countersRows[$i - 1][0] = "Y"; //mark row for update
						$stackRows[$stackNum - 1]['Top'] = $gameRow['P2Ref']; 	
						$stackRows[$stackNum - 1][0] = "Y";} 	//mark row for update 
					//put the counter rec on top of the stack by updating it's height
					$countersRows[$i - 1]['CounterHeight'] = $stackRows[$countersRows[$i-1]['StackNum']]['StackHeight'] + $i - $stackRows[$stackNum]['StackHeight'] ;
				}
				//update the height of the game step";
				if ($stackNum == 0) {
					$stackRows[$stackNum+1]['StackHeight'] += $moveNum;}	
				else {
				$stackRows[$stackNum-1]['StackHeight'] += $moveNum;}	
			}
		}
		//process move in the play area
		else {
			//check whose turn it is and adjust game step 
			if ($gameRow['LastPlayer'] == $gameRow['P1Ref']) {	
				//player 2's move
				$stackNum = $gameRow['AreaSize'] + 1 - $movePos;
				$playerRef = $gameRow['P2Ref']; }
			else {
				//player 1's move
				$stackNum = $movePos;
				$playerRef = $gameRow['P1Ref']; } 

			//get counter records
			$countersRows = fnQrySelectCounters($gameRef, $stackNum, 0);
			if (is_string($countersRows)) {
				$errMsg = "Counter records not found. Fatal error";
				$errCode = "PMO-2B";
				fnLogMessageToDb($errCode.$errMsg);
				//return array("errCode"=>$errCode,"errMsg"=>$errMsg);
				$logMsgs[] = $errCode.$errMsg; 
			}
			else {
				//take one or more counters away from the current step
				//reduce height of stack by number of counters being moved
				$stackRows[$stackNum]['StackHeight'] -= $moveNum ;
				$stackRows[$stackNum][0] = "Y"; //mark row for update 
				//change top counter	
				if ($stackRows[$stackNum]['StackHeight'] == 0) {
					//set top to zero
					$stackRows[$stackNum]['Top'] = 0; }
				else {
					//set top to a number > zero
					$stackRows[$stackNum]['Top'] = $countersRows[$stackRows[$stackNum]['StackHeight']-1]['PlayerRef']; }	

				//increase height of next stack, move counters and update top";
				if ($playerRef == $gameRow['P1Ref']) {
					// player 1";
					$stackRows[$stackNum+1][0] = "Y"; //mark row for update 		
					//move counters 
					for ($i = $stackRows[$stackNum]['StackHeight'] + 1; $i <= $stackRows[$stackNum]['StackHeight'] + $moveNum; $i++) {   
					$countersRows[$i-1]['StackNum'] = $stackNum + 1 ; 
					$countersRows[$i-1][0] = "Y"; //mark row for update
						$countersRows[$i-1]['CounterHeight'] = $stackRows[$stackNum+1]['StackHeight'] + $i - $stackRows[$stackNum]['StackHeight'] ; }
					//increase height
					$stackRows[$stackNum+1]['StackHeight'] += $moveNum ;	
					//update top of stack
					$stackRows[$stackNum+1]['Top'] = $gameRow['P1Ref'] ; 
				}
				else {
					// player 2";	
					$stackRows[$stackNum-1][0] = "Y"; //mark row for update 	
					//move counters 
					for ($i = $stackRows[$stackNum]['StackHeight'] + 1; $i <= $stackRows[$stackNum]['StackHeight'] + $moveNum; $i++) {   
						$countersRows[$i-1]['StackNum'] = $stackNum - 1 ; 
						$countersRows[$i-1][0] = "Y"; //mark row for update
						$countersRows[$i-1]['CounterHeight'] = $stackRows[$stackNum-1]['StackHeight'] + $i - $stackRows[$stackNum]['StackHeight'] ; }
					//increase height
					$stackRows[$stackNum-1]['StackHeight'] += $moveNum  ;
					//update top of stack
					$stackRows[$stackNum-1]['Top'] = $gameRow['P2Ref'] ; 
				}

				//If player has reached the far side of the board then all the counters are moved to the players reserve";
				if ($playerRef == $gameRow['P1Ref']) {
					//player 1
					if ($stackNum+1 == $gameRow['AreaSize']) {	
						//player 1 has reached the far side of the board so ...";
						//save layer updates
						$maxI = count($countersRows);
						for ($i=0; $i < $maxI; $i++) {
							if ($countersRows[$i][0] == "Y") {
								$fnResp = fnQryUpdateCounters($countersRows[$i]['GameRef'],$countersRows[$i]['StackNum'],$countersRows[$i]['PlayerRef'],$countersRows[$i]['CounterHeight'],$countersRows[$i]['CounterRecID']) ; 
								if (strlen($fnResp) > 0 ) {
									$errMsg = "Process Move - " . $fnResp;
									$errCode = "PMO-D";
									$conn->rollback(); 
									fnLogMessageToDb($errCode.$errMsg);
									//return array("errCode"=>$errCode,"errMsg"=>$errMsg);
									$logMsgs[] = $errCode.$errMsg; 
									break; 
								}
							}
						}
						if (strlen($errCode) == 0 ) {
							//select counters records for next game step
							$countersRows = fnQrySelectCounters($gameRow['GameRef'], $stackNum+1, 0);
							if (is_string($countersRows)) {
								$errMsg = "Counter records not found. Fatal error";
								$errCode = "PMO-2C";
								//return array("errCode"=>$errCode,"errMsg"=>$errMsg); 
								$logMsgs[] = $errCode.$errMsg; }
							else {
								//move counters and make them belong to player 1
								for ($i=0; $i<=$stackRows[$stackNum+1]['StackHeight'] - 1; $i++) {		
									$countersRows[$i]['CounterHeight']= $stackRows[0]['StackHeight'] + 1 + $i;	
									$countersRows[$i]['StackNum'] = 0; 
									$countersRows[$i]['PlayerRef'] = $gameRow['P1Ref'];	
									$countersRows[$i][0] = "Y"; } 	//flag for update 			
								//increase height of reserve
								$stackRows[0]['StackHeight'] += $stackRows[$stackNum+1]['StackHeight'];
								$stackRows[0][0] = "Y";  //flag for update 				
								//reset height of far side of board
								$stackRows[$stackNum+1]['StackHeight'] = 0;
								$stackRows[$stackNum+1]['Top'] = 0; 	
								$stackRows[$stackNum+1][0] = "Y";  //flag for update 
							}
						}
					}
				}
				else {
					//player 2
					if ($stackNum-1 == 1) {
						//player 2 has read the far side of the board so ...";
						//save layer updates
						$maxI = count($countersRows);
						for ($i=0; $i < $maxI; $i++) {
							if ($countersRows[$i][0] == "Y") {
								$fnResp = fnQryUpdateCounters($countersRows[$i]['GameRef'],$countersRows[$i]['StackNum'],$countersRows[$i]['PlayerRef'],$countersRows[$i]['CounterHeight'],$countersRows[$i]['CounterRecID']);
								if (strlen($fnResp) > 0 ) {
									$errMsg = "Process Move - " . $fnResp;
									$errCode = "PMO-E";
									$conn->rollback(); 
									fnLogMessageToDb($errCode.$errMsg);
									//return array("errCode"=>$errCode,"errMsg"=>$errMsg);
									$logMsgs[] = $errCode.$errMsg; 
									break;
								}
							}
						}
						if (strlen($errCode) == 0) {
							//select layer records for next game step";		
							$countersRows = fnQrySelectCounters($gameRow['GameRef'], $stackNum-1,0);
							if (is_string($countersRows)) {
								$errMsg = "Counter records not found. Fatal error";
								$errCode = "PMO-2D";
								//return array("errCode"=>$errCode,"errMsg"=>$errMsg);
								$logMsgs[] = $errCode.$errMsg; 
							}
							else {
								//move counters and make them belong to player 2
								for ($i= 0; $i<= $stackRows[$stackNum-1]['StackHeight'] - 1; $i++) { 
									$countersRows[$i]['CounterHeight'] = $stackRows[$gameRow['AreaSize']+1]['StackHeight'] + 1 + $i; 	
									$countersRows[$i]['StackNum'] = $gameRow['AreaSize'] + 1;
									$countersRows[$i]['PlayerRef'] = $gameRow['P2Ref'];	
									$countersRows[$i][0] = "Y"; } 	//mark for update
								//increase height of reserve
								$stackRows[$gameRow['AreaSize']+1]['StackHeight'] += $stackRows[$stackNum-1]['StackHeight'];
								$stackRows[$gameRow['AreaSize']+1][0] = "Y";  //flag for update 			
								//reset height of far side of board
								$stackRows[$stackNum-1]['StackHeight'] = 0;	
								$stackRows[$stackNum-1]['Top'] = 0;	
								$stackRows[$stackNum-1][0] = "Y";	//mark for update
							}
						}
					}
				}
			}
		}
	}
	//only continue if there are no errors
	if (strlen($errCode) == 0) {
		//check to see if the next player has any moves available
		if ($playerRef == $gameRow['P2Ref']) {
			//player 2 has moved so check if player 1 has lost";
			if (fnCheckLoser($gameRow['P1Ref'], $stackRows)) {
				$gameRow['Winner'] = $playerRef; $gameRow['LastPlayer'] = $gameRow['P2Ref'];
				$errMsg = "Player " . $playerRef . " has won the game."; 
				$errCode = "PMO-3"; 
				fnLogMessageToDb($errCode.$errMsg);
				$logMsgs[] = $errCode.$errMsg;
			}
			else {
				//player 2 has moved but not won so check if player 1 has any moves";
				$anyMoves = False;
				if ($stackRows[0]['StackHeight'] > 0) {		
					$anyMoves = True;}
				else {
					for ($i = 1; $i<=$gameRow['AreaSize']-1; $i++) {	
						if ($stackRows[$i]['StackHeight'] >= $stackRows[$i+1]['StackHeight'] And $stackRows[$i]['Top'] == $gameRow['P1Ref']) {
							$anyMoves = True;
							break; }
					}
				}
				if ($anyMoves) {
					//player 1 has moves available so switch turns";
					$gameRow['LastPlayer'] = $gameRow['P2Ref'];}
				else {
					$errMsg = "Player " . $gameRow['P1Ref'] . " has no moves available. Miss a turn."; 
					$errCode = "PMO-4"; 
					fnLogMessageToDb($errCode.$errMsg);
					$logMsgs[] = $errCode.$errMsg;
				}
			}
		}
		else {
			//player 1 has moved so check if player 2 has lost";
			if (fnCheckLoser($gameRow['P2Ref'], $stackRows)) {
				$gameRow['Winner'] = $playerRef; $gameRow['LastPlayer'] = $gameRow['P1Ref'];
				$errMsg = "Player " . $playerRef . " has won the game."; 
				$errCode = "PMO-5"; 
				fnLogMessageToDb($errCode.$errMsg);
				$logMsgs[] = $errCode.$errMsg;
			}
			else {
				//player 1 has moved but not won so check if player 2 has any moves";
				$anyMoves = False;
				if ($stackRows[$gameRow['AreaSize']+1]['StackHeight'] > 0) {
					$anyMoves = True; }
				else {
					for ($i=$gameRow['AreaSize']; $i>=2; $i--) { 
						if ($stackRows[$i]['StackHeight'] >= $stackRows[$i-1]['StackHeight'] And $stackRows[$i]['Top'] == $gameRow['P2Ref']) {
							$anyMoves = True;
							break; }
					}
				}
				if ($anyMoves) {
					//player 2 has moves available so switch turns";
					$gameRow['LastPlayer'] = $gameRow['P1Ref']; }
				else {
					$errMsg = "Player " . $gameRow['P2Ref'] . " has no moves available. Miss a turn."; 
					$errCode = "PMO-6"; 
					fnLogMessageToDb($errCode.$errMsg);
					$logMsgs[] = $errCode.$errMsg;
				}
			}
		}
	}
	//update the last updated time";
	$gameRow['LastUpdated'] = date("Y-m-d H:i:s");	
	
	//increment move count
	$gameRow['TurnCount'] += 1;	

	//save counter recs
	fnLogMessageToDb("updating counters") ;
	$logMsgs[] = "updating counters";
	$maxI = count($countersRows);
	for ($i=0; $i<$maxI; $i++) {
		if ($countersRows[$i][0] == "Y") {
			$fnResp = fnQryUpdateCounters($countersRows[$i]['GameRef'],$countersRows[$i]['StackNum'],$countersRows[$i]['PlayerRef'],$countersRows[$i]['CounterHeight'],$countersRows[$i]['CounterRecID']);
			if (strlen($fnResp) > 0) {
				$errCode2 = "PMO-8";
				$errMsg2 = "Process Move - " . $fnResp; 
				fnLogMessageToDb($errCode2.$errMsg2);
				$logMsgs[] = $errCode2.$errMsg2;
				break; }
		}
	}
	//only continue if there are no errors
	if (strlen($errCode2) == 0) {
		//save backup of counter records
		fnLogMessageToDb("saving counters backup") ;
		//1. get all counters for this game and turncount 0
		$countersRows = fnQrySelectAllCounters($gameRef,0);
		if (is_string($countersRows)) {
			$errMsg2 = "Counter records not found. Fatal error";
			$errCode2 = "PMO-7";
			fnLogMessageToDb($errCode2.$errMsg2);
			//return array("errCode"=>$errCode2,"errMsg"=>$errMsg2); 
			$logMsgs[] = $errCode2.$errMsg2; }
		else {
			//2. save backup of this turncount
			$maxI = count($countersRows);
			for ($i=0; $i<$maxI; $i++) {
				$fnResp = fnQryAddCounter($countersRows[$i]['GameRef'],$countersRows[$i]['StackNum'],$countersRows[$i]['PlayerRef'],$countersRows[$i]['CounterHeight'], $gameRow['TurnCount']); 
				if (strlen($fnResp) > 0) {
					$errCode2 = "PMO-9";
					$errMsg2 = "Process Move - " . $fnResp; 
					fnLogMessageToDb($errCode2.$errMsg2);
					$logMsgs[] = $errCode2.$errMsg2;
					break; }
			}
		}
	}
	//only continue if there are no errors
	if (strlen($errCode2) == 0) {
		//save game rec
		fnLogMessageToDb("saving game") ;
		$fnResp = fnQryUpdateGame($gameRow['GameRef'],$gameRow['P1Ref'],$gameRow['P2Ref'],$gameRow['LastPlayer'],$gameRow['StartDate'],$gameRow['LastUpdated'],$gameRow['AreaSize'],$gameRow['Winner'],$gameRow['TurnCount']);
		if (strlen($fnResp) > 0) {
			$errCode2 = "PMO-0";
			$errMsg2 = "Process Move - " . $fnResp; 
			fnLogMessageToDb($errCode2.$errMsg2);
			$logMsgs[] = $errCode2.$errMsg2;
		}
		else {
			// also store a backup
			$fnResp = fnQryAddGame($gameRow['GameRef'],$gameRow['P1Ref'],$gameRow['P2Ref'],$gameRow['LastPlayer'],$gameRow['StartDate'],$gameRow['LastUpdated'],$gameRow['AreaSize'],$gameRow['Winner'],$gameRow['TurnCount'],$gameRow['TurnCount']);
			if (strlen($fnResp) > 0) {
				$errCode2 = "PMO-A";
				$errMsg2 = "Process Move - " . $fnResp; 
				fnLogMessageToDb($errCode2.$errMsg2);
				$logMsgs[] = $errCode2.$errMsg2;
			}
		}
	}
	//only continue if there are no errors
	if (strlen($errCode2) == 0) {
	//save stack recs
		fnLogMessageToDb("saving stacks") ;
		$maxI = count($stackRows);
		for ($i=0; $i<$maxI; $i++) {
			if ($stackRows[$i][0] == "Y") {
				$fnResp = fnQryUpdateStack($stackRows[$i]['StackNum'],$stackRows[$i]['StackHeight'],$stackRows[$i]['Top'],$stackRows[$i]['StackRecID']); 
				if (strlen($fnResp) > 0) {
					$errCode2 = "PMO-B";
					$errMsg2 = "Process Move - " . $fnResp; 
					fnLogMessageToDb($errCode2.$errMsg2);
					$logMsgs[] = $errCode2.$errMsg2;
					break; 
				}
			}
			//also store a backup
			$fnResp = fnQryAddStack($stackRows[$i]['GameRef'],$stackRows[$i]['StackNum'],$stackRows[$i]['StackHeight'],$stackRows[$i]['Top'],$gameRow['TurnCount']);
			if (strlen($fnResp) > 0) {
				$errCode2 = "PMO-C";
				$errMsg2 = "Process Move - " . $fnResp; 
				fnLogMessageToDb($errCode2.$errMsg2);
				$logMsgs[] = $errCode2.$errMsg2;
				break; 
			}
		}
	}
	//end database transaction
	if (strlen($errCode2)>0) { 
		//an error has occurred rollback any database uopdates
		$conn->rollback(); 
		foreach ($logMsgs as $msgs) {fnLogMessageToDb($msgs);}
		fnLogMessageToDb ("Process Move - Rollback");
		return array("errCode"=>$errCode2,"errMsg"=>$errMsg2); 
	}
	else {
		$conn->commit(); 
		fnLogMessageToDb ("Process Move - Commit");
		return array("errCode"=>$errCode,"errMsg"=>$errMsg); 
	}
}
//End fnProcessMove
function fnGetMoves ($gameKey, $gameRow="") {
	fnLogMessageToDb ("start fnGetMoves");
/*
	get all the possible moves for the given game
	return the result as a list (array) of moves in the form (GameRef, MoveNum, MovePos) 
*/
	//find out if gameKey is GameRecId or Nmx hash key
	if (strlen($gameKey)<20) {
		$gameRecID=$gameKey; }
	else {
		$gameRecID = 0;
		$hashKey = $gameKey; }
		
	//an array to hold all the possible moves
	$movesList = array();
	$errCode=""; $errMsg="";

	//only need to do the next section if game hasn't been passed in as a parameter
	if (is_string($gameRow)) {
		if ($gameRecID>0) {
			//get game record using GameRecID
			fnLogMessageToDb("get game record using GameRecID");
			$gameRow = fnQrySelectGameByID($gameRecID);
			if (is_string($gameRow)) {
				$errCode = "GM-4";
				$errMsg = $gameRow; 
				fnLogMessageToDb ($errCode.$errMsg); }
		}
		else {
			//get the relevant game record using hash key
			fnLogMessageToDb("get game record using hashKey");
			$gameRow = fnQrySelectNmxGame($hashKey);
			if (is_string($gameRow)) {
				$errCode = "GM-5";
				$errMsg = $gameRow;	
				fnLogMessageToDb ($errCode.$errMsg); }
		}
	}
	
	if (strlen($errCode)==0){
		//check player 2 has been set up
		if ($gameRow['P2Ref']==0) {
			$errMsg = "Game " . $gameKey . " not started";
			$errCode = "GM-2";
			fnLogMessageToDb($errCode.$errMsg); }
		else {
			if ($gameRecID>0) {
				//loop round to find all the options for moving counters from the reserve
				$stackRows = fnQrySelectStacks($gameRow['GameRef'],$gameRow['TurnCount']);
				if (is_string($stackRows)) {
					$errMsg = "stacks not found. Fatal error.";
					$errCode = "GM-3";
					fnLogMessageToDb($errCode.$errMsg); }
			} else {
				$stackRows = fnQrySelectNmxStacks($hashKey);
				if (is_string($stackRows)) {
					$errMsg = "Stack not found";
					$errCode = "GM-6";
					fnLogMessageToDb($errCode.$errMsg); }
			}
			if (strlen($errCode)==0) {
				//loop to find all the possible moves from the reserve
				if ($gameRow['LastPlayer'] == $gameRow['P1Ref']) {
					//P2's turn
					for ($moveNum=1; $moveNum<=$stackRows[$gameRow['AreaSize']+1]['StackHeight']; $moveNum++) {
						array_push($movesList,array($gameKey,$moveNum,0)); }
				}
				else {
					//P1's turn
					for ($moveNum=1; $moveNum<=$stackRows[0]['StackHeight']; $moveNum++) {
						array_push($movesList,array($gameKey,$moveNum,0)); }
				}
			}
		}
	}

	if (strlen($errCode)==0){
		//loop to find all the possible moves in the playing area
		if ($gameRow['LastPlayer'] == $gameRow['P1Ref']) {
			//P2's turn
			//working across the playing area starting at the P2 side
			for ($movePos=$gameRow['AreaSize']; $movePos>1; $movePos--) {
				//for P2 to move the stack must belong to P2
				if ($stackRows[$movePos]['Top']==$gameRow['P2Ref']) {
					//to move this stack must be same or greater height than the next stack
					if ($stackRows[$movePos]['StackHeight'] >= $stackRows[$movePos-1]['StackHeight']) {
						//loop through possible moves
						if ($stackRows[$movePos-1]['StackHeight'] > 0) {
							for ($moveNum=1; $moveNum<=$stackRows[$movePos]['StackHeight'] - $stackRows[$movePos-1]['StackHeight'] + 1; $moveNum++) {
								array_push($movesList,array($gameKey,$moveNum,$gameRow['AreaSize'] + 1 - $movePos)); }
						} else {
							for ($moveNum=1; $moveNum<=$stackRows[$movePos]['StackHeight']; $moveNum++) {
								array_push($movesList,array($gameKey,$moveNum,$gameRow['AreaSize'] + 1 - $movePos)); }
						}
					}
				}
			}
		}
		else {
			//P1's turn
			//working across the playing area starting at the P1 side
			for ($movePos=1; $movePos<=$gameRow['AreaSize']-1; $movePos++) {
				//for P1 to move the stack must belong to P1
				if ($stackRows[$movePos]['Top']==$gameRow['P1Ref']) {
					//to move this stack must be same or greater height than the next stack
					if ($stackRows[$movePos]['StackHeight'] >= $stackRows[$movePos+1]['StackHeight']) {
						//loop through possible moves
						if ($stackRows[$movePos+1]['StackHeight'] > 0) {
							for ($moveNum=1; $moveNum<=$stackRows[$movePos]['StackHeight'] - $stackRows[$movePos+1]['StackHeight'] + 1; $moveNum++) {
								array_push($movesList,array($gameKey,$moveNum,$movePos)); }
						} else {
							for ($moveNum=1; $moveNum<=$stackRows[$movePos]['StackHeight']; $moveNum++) {
								array_push($movesList,array($gameKey,$moveNum,$movePos)); }
						}
					}
				}
			}
		}
	}
	
	if (strlen($errCode)==0){	
		return $movesList; }
	else {
		return $errCode.$errMsg; }
}
//End fnGetMoves
function fnCheckLoser($playerRef, $stackRows) {
	fnLogMessageToDb("start fnCheckLoser");
	//returns True if the given player has lost otherwise False

	//not a loser if there is something in reserve
	if ($playerRef == $stackRows[0]['Top']) {
		if ($stackRows[0]['StackHeight'] > 0) {return False; }	
	}
	else {
		if ($stackRows[count($stackRows)-1]['StackHeight'] > 0) {return False; }
	}

	//not a loser if player has a counter on top of one of the game steps
	for ($i=1; $i<=count($stackRows)-2; $i++) {	//i As Integer = 1 To dsGameStep.GameStep.Rows.Count - 2
		if ($playerRef == $stackRows[$i]['Top']) {return False;}	//playerRef = dsGameStep.GameStep(i).Top Then Exit Function
	}

	//player has lost
	return True;
}
//End fnCheckLoser
function fnProcessInput($callString) {
	fnLogMessageToDb("start fnProcessInput");
	//globals
	global $tbP1NewPlyrName, $tbP1NewGameRef;
	global $tbP2NewPlyrName, $tbP2NewGameRef; 
	global $conn;
	
	//convert call string to upper case
	$callString = strtoupper($callString);
	
	//call function to extract the parameters from the call string
	$refs=fnFindParams($callString);
	//print_r($refs);

	$errCode = ""; $errMsg = "";
	if (substr($refs[0][0],0,2) == "FP") {
		$errCode = $refs[0][0] ;
        $errMsg = $refs[0][1] ; }
	elseif (array_key_exists("TYPE",$refs) == False) {
		$errCode = "PrI-1";
		$errMsg = "input string - type param missing"; }#
    else {
		switch ($refs["TYPE"]){
			case "TESTING":
				print_r(fnNegaMax($refs["GAMEREF"],3,1)) ;
				break;
		
			case "GET":
			case "GETMOVES":
				print_r(fnGetMoves($refs["GAMEREF"]));
				break;
		
			case "DATACHECK":
			case "CHECK":
				fnDataChecks($refs["GAMEREF"]);
				break;

			case "P1_NEW_GAME":
			case "P1NEWGAME":
				//player name and game central are both optional parameters
                if (count($refs) > 3) {
                    //error - too many parameters
					$errCode = "P1N-1";
					$errMsg = "P1 New Player - too many parameters";} 
				elseif (count($refs) == 1) {
					//error - no parameters
					$errCode = "P1N-4";
					$errMsg ="P1 New Player - no parameters"; }	
				elseif (count($refs) == 2) {
					//if there is one parameter then it must be Player Name
                    if (array_key_exists("PLAYERNAME",$refs) == False ) {
                        //error - only valid parameter is player name
						$errCode = "P1N-2";
                        $errMsg = "P1 New Player - only valid parameter is player name"; } }
				elseif ((array_key_exists("PLAYERNAME",$refs) == False ) or (array_key_exists("GAMECENTRAL",$refs) == False )) {
					//error - invalid parameters
					$errCode = "P1N-3";
					$errMsg ="P1 New Player - invalid parameters"; }
				elseif (array_key_exists("GAMECENTRAL",$refs) == True And $refs["GAMECENTRAL"] <> "Y" And $refs["GAMECENTRAL"] <>  "N") {
					//error game central must by y or n
					$errCode = "P1N-8";
					$errMsg ="P1 New Player - game central must by y or n"; }
				
				if (strlen($errCode) == 0) {
					//valid input so carry on
					if (count($refs) == 2) {
						//one parameter which must be the player name. Set gameCentral to No
                        $gameCentral = "N";
						$tbP1NewPlyrName = $refs["PLAYERNAME"]; }
					else {
						//two parameters for both game central and player name
						fnLogMessageToDb("P1 new game params - player name =" . $refs["PLAYERNAME"] . " and game ref =" . $refs["GAMECENTRAL"]);
						$gameCentral = $refs["GAMECENTRAL"];
						$tbP1NewPlyrName = $refs["PLAYERNAME"];}
						
					//check the password
					$fnResp = fnValidatePlayerNamePW($tbP1NewPlyrName); 
					if (array_key_exists('errCode',$fnResp)) {
						$errCode = "P1N-7";
						$errMsg = 'Player Move - player name and/or password is incorrect'; } 
					else {
						//extract player name
						$inx = strpos($tbP1NewPlyrName,"/",0); 
						$tbP1NewPlyrName = substr($tbP1NewPlyrName,0,$inx); } 
				}
				if (strlen($errCode) == 0) {
					$fnResp = fnProcessNewP1($tbP1NewPlyrName, True); 
					if (array_key_exists('errCode',$fnResp) == False) {
                        //Response from fnProcessNewP1 is ok - a numeric fnResp means the new game ref has been returned instead of string error message
						$gameRef = $fnResp;
						//call state of play 
						$fnResp = fnStateOfPlay($gameRef);
						if (is_array($fnResp)) {
							$errCode = "    ";
                            $errMsg = json_encode($fnResp); }
                        else {
							$errCode = "P1N-5";
                            $errMsg = "P1 New Player - error response from state of play"; } }
					else {
						//error occurred in fnProcessNewP1
                        $errCode = "P1N-6";
                        $errMsg = "P1 New Player - error response from process new player 1"; } 
						
					//if state of play has been called successfully then check GAMECENTRAL flag and set up player 2 if required
					if ($errCode == "    " and $gameCentral == "Y") {
						$fnResp = fnProcessNewP2($gameRef, "GAMECENTRAL", True);
						if (strlen($fnResp) > 0) {
							//errors occurred
							$errCode = substr($fnResp,0, 5);
							$errMsg = "error occurred setting up GAMECENTRAL as player 2 [" . substr($fnResp,5,strlen($fnResp)-5) . "]"; } 
						else {
							//call state of play 
							$fnResp = fnStateOfPlay($gameRef);
							if (is_array($fnResp)) {
								$errCode = "    ";
								$errMsg = json_encode($fnResp); }
							else {
								$errCode = "P1N-9";
								$errMsg = "P1 New Player - error response from state of play (for player 2)"; } 
						}
					}
				}
				break;
			
			case "P2_NEW_GAME":
			case "P2NEWGAME":
                //must have parameters for gameRef and playerName
                if (count($refs) !== 3) {
					//error - incorrect number of parameters
                    $errCode = "P2N-1";
                    $errMsg = "P2 New Player - incorrect number of parameters"; }
                else {
					//2 parameters - one must be game ref and the other player name. 
					if (array_key_exists("GAMEREF",$refs) == False) {
						//error - game ref parameter missing
						$errCode = "P2N-2";
						$errMsg = "P2 New Player - game ref parameter missing"; }
					elseif (array_key_exists("PLAYERNAME",$refs) == False) {
						//error - player name parameter missing
						$errCode = "P2N-3";
						$errMsg = "P2 New Player - the player name parameter is missing"; }
					elseif (!preg_match('/^[0-9]+$/',$refs["GAMEREF"])) {
						//game ref must be numeric
						$errCode = "P2N-4";
						$errMsg = "P2 New Player - game ref not numeric"; }
				}
				
				if (strlen($errCode) == 0) {
					//valid input so carry on
					$tbP2NewGameRef = $refs["GAMEREF"]; 
					$tbP2NewPlyrName = $refs["PLAYERNAME"]; 

					//check the password
					$fnResp = fnValidatePlayerNamePW($tbP2NewPlyrName); 
					if (array_key_exists('errCode',$fnResp)) {
						$errCode = "P2N-7/".$fnResp['errCode'];
						$errMsg = $fnResp['errMsg']; }
						//$errMsg = "P2 New Player - player name and/or password is incorrect"; } 
					else {
						//extract player name
						$inx = strpos($tbP2NewPlyrName,"/",0); 
						$tbP2NewPlyrName = substr($tbP2NewPlyrName,0,$inx); }
				}
				
				if (strlen($errCode) == 0) {
					//all ok so create player 2
					$fnResp = fnProcessNewP2($tbP2NewGameRef, $tbP2NewPlyrName, True);
                    //if (strlen($fnResp) == 0) {
					if (array_key_exists('errCode',$fnResp) == False) {
                        //all ok
                        //call state of play and return state of play message
                        $tbP1NewGameRef = $tbP2NewGameRef;
                        $fnResp = fnStateOfPlay($tbP1NewGameRef);
                   
						if (is_array($fnResp)) {
                            $errCode = "    ";
                            $errMsg = json_encode($fnResp);}
                        else {
                            $errCode = "P2N-9";
                            $errMsg = "P2 New Player - error response from state of play";} }
                    else {
                        //errors occurred setting up player 2
                        $errCode = 'P2N-8,'.$fnResp['errCode'];;
						$errMsg = $fnResp['errMsg'];}
				}
				break;
			
			case "GAME_STATUS":
			case "GAMESTATUS":
				$turnCount=0;
				//must have parameters for gameRef; turn count is optional
				if (count($refs) > 3) {
					//error - incorrect number of parameters
					$errCode = "GS-1";
					$errMsg = "Game Status - incorrect number of parameters"; }				
				elseif (array_key_exists("GAMEREF",$refs)==False) {
					//error - game ref parameter missing
					$errCode = "GS-2";
					$errMsg = "Game Status - game ref parameter missing"; }
				/*elseif (is_numeric($refs["GAMEREF"])==FALSE) {
					$errCode = "GS-3";
					$errMsg = "Game Status - game ref not numeric"; } */
				elseif (count($refs) == 3) {
					if (array_key_exists("TURNCOUNT",$refs)==False) {
						//error - turn count parameter missing
						$errCode = "GS-4";
						$errMsg = "Game Status - turn count parameter missing"; }
					else {$turnCount = $refs["TURNCOUNT"];}
				}
				if (strlen($errCode) == 0) {
					//valid input so carry on
					$tbP2OldGameRef = $refs["GAMEREF"];
					$fnResp = fnStateOfPlay($tbP2OldGameRef,$turnCount);
					if (is_array($fnResp)) {
						$errCode = "    ";
						$errMsg = json_encode($fnResp);}
					else {
						$errCode = substr($fnResp,0,5);
						$errMsg = substr($fnResp,5,strlen($fnResp)-5);} 
				}
				break;

			case "P1_MOVE":
			case "P1_MOVES":
			case "P1MOVE":
			case "P1MOVES":
			case "P2MOVES":
			case "P2MOVE":
			case "P2_MOVE":
			case "P2_MOVES":
				//must have parameters for game ref, player name, move pos and move count. 
				if (count($refs) <> 5) {
					//error - incorrect number of parameters
					$errCode = "PM-1";
					$errMsg = "Player Move - incorrect number of parameters"; }
				elseif (array_key_exists("GAMEREF",$refs) == False) {
					//error - game ref parameter missing
					$errCode = "PM-2";
					$errMsg = "Player Move - game ref parameter missing";}
				elseif (array_key_exists("PLAYERNAME",$refs) == False) {
					//error - player ref parameter missing
					$errCode = "PM-3";
					$errMsg = "Player Move - player name parameter missing"; }
				elseif (array_key_exists("MOVEPOS",$refs) == False) {
					//error - move position parameter missing
					$errCode = "PM-4";
					$errMsg = "Player Move - move position parameter missing"; }
				elseif (array_key_exists("MOVENUM",$refs) == False) {
					//error - move count/num parameter missing
					$errCode = "PM-5";
					$errMsg = "Player Move - move count/num parameter missing"; }

				if (strlen($errCode) == 0) {
					//valid input so carry on
					if (!preg_match('/^[0-9]+$/',$refs["GAMEREF"])) {
						//game ref must be numeric
						$errCode = "PM-7c";
						$errMsg = "Player Move - game ref, move num and move pos must be numeric"; }
					else {
						$tbP1OldGameRef = $refs["GAMEREF"];
						$tbP2OldGameRef = $refs["GAMEREF"]; 
					
						$fnResp = fnValidatePlayerNamePW($refs["PLAYERNAME"]); 
						if (array_key_exists('errCode',$fnResp)) {
							$errCode = "PM-6";
							$errMsg = "Player Move - player name and\or PIN is incorrect"; }
						else {
							$tbPOldPlyrRef = $fnResp; 
		
							if (!preg_match('/^[0-9]+$/',$refs["MOVEPOS"])) {
								//move pos must be numeric
								$errCode = "PM-7a";
								$errMsg = "Player Move - game ref, move num and move pos must be numeric"; }
							else {
								$tbPMovePos = $refs["MOVEPOS"]; 
					
								if (!preg_match('/^[0-9]+$/',$refs["MOVENUM"])) {
									//move num must be numeric
									$errCode = "PM-7b";
									$errMsg = "Player Move - game ref, move num and move pos must be numeric"; }
								else {
									$tbPMoveCount = $refs["MOVENUM"]; }
							}
						}
					}
				}
					
				if (strlen($errCode) == 0) {
					//input has been put into the form. Now run the play function
					$fnResp = fnValidatePlay($tbP2OldGameRef,$tbPOldPlyrRef,$tbPMovePos,$tbPMoveCount); 

					if ($fnResp["errCode"]=="" or $fnResp["errCode"]=="PMO-6" or $fnResp["errCode"]=="PMO-4") {
						//successful move so return state of play
						$fnResp = fnStateOfPlay($tbP2OldGameRef);
						if (is_array($fnResp)) {
							//all ok so send stats of play data back
							$errCode = "    ";
							$errMsg = json_encode($fnResp); }
						else {
							//error from state of play
							$errCode = substr($fnResp,0, 5);
							$errMsg = substr($fnResp,5, strlen($fnResp)- 5); } }
					else {
						//error from fnValidatePlay
						if ($fnResp["errCode"]=="V") {
							$errCode = "PM-8";
							$errMsg = "Player Move - error from validate play"; }
						else {
							$errCode = "PM-8,".$fnResp["errCode"];
							$errMsg = $fnResp["errMsg"]; } }
				}
				break;
					
			case "PLAYER_INFO":
			case "PLAYERINFO":
				//one parameter which is player name 
				if (count($refs) <> 2) {
					//error - incorrect number of parameters
					$errCode = "PI-1";
					$errMsg = "Player info - incorrect number of parameters"; }
				elseif (array_key_exists("PLAYERNAME",$refs) == false) {
					//error - invalid parameter
					$errCode = "PI-2";
					$errMsg = "Player info - requires player name parameter"; }
				
				if (strlen($errCode) == 0) {
					//valid input so carry on
					//search the players table to retrieve player ref
					$playerRow = fnQrySelectPlayer(strtoupper(trim($refs["PLAYERNAME"])));
					if (is_string($playerRow)) {
						$errCode = "PI-5";
						$errMsg = "Player info - player name not found"; }
					else {
						$playerRef = $playerRow['PlayerRef'];
						//prepare output
						$errCode = "    ";
						$errMsg = "player_info(playerName=".strtoupper(trim($refs["PLAYERNAME"]));
						//find any games that involve the player
						$gameRows=fnQrySelectGamesForPlayer($playerRef);
						if (is_string($gameRows)) {
							//output already set up and nothing to add except the closing bracket
							$errMsg .= ")";
							$errMsg = json_encode(array("type" => "player_info", "PlayerName" => strtoupper(trim($refs["PLAYERNAME"])), "Games" => array())); }
						else {
							for ($i=0; $i < count($gameRows); $i++) {
								if ($gameRows[$i]['Winner']==0){$gameState="in progress";}
								elseif ($gameRows[$i]['Winner']==$playerRef){$gameState="won";}
								else {$gameState="lost";} 
								$errMsg .= ";Game=".$gameRows[$i]['GameRef'].",GameState=".$gameState; 
								$games[] = array("GameRef" => $gameRows[$i]['GameRef'],  "GameState" => $gameState); }
							$errMsg .= ")";
							$errMsg = json_encode(array("type" => "player_info", "PlayerName" => strtoupper(trim($refs["PLAYERNAME"])), "Games"=> $games)) ; }
					}
				}
				break;

			case "OPEN_GAMES":
			case "OPENGAMES":
				//No parameters
				if (count($refs) <> 1) {
					//error - incorrect number of parameters
					$errCode = "OG-1";
					$errMsg = "Open Games - incorrect number of parameters"; }

				if (strlen($errCode) == 0) {
					//valid input so carry on
					//select all games where P2Ref = 0 and join with players table to get player 1 PlayerName
					$openGamesRows = fnQrySelectOpenGames() ;
					if (is_string($openGamesRows)) {
						$errCode = "    ";
						$errMsg = "Open_Games(none)"; 
						$errMsg = json_encode(array("type" => "Open_Games","Games" => array()));}
					else {
						$errCode = "    ";
						$errMsg = "Open_Games(";
						for ($i=0; $i < count($openGamesRows); $i++) {
							$games[] = array("GameRef" => $openGamesRows[$i]['GameRef'], "Player1Name" => $openGamesRows[$i]['PlayerName']);
							$errMsg = $errMsg."Game=".$openGamesRows[$i]['GameRef']. "," . $openGamesRows[$i]['PlayerName'] . ";" ; }
						$errMsg = $errMsg.")"	; 
						$errMsg = json_encode(array("type" => "Open_Games","Games" => $games)); }
				}
				break;					

			case "REGISTER":
				//two parameters
				if (count($refs) <> 3) {
					//error - incorrect number of parameters
					$errCode = "RP-1";
					$errMsg = "Register Player - incorrect number of parameters"; }
				elseif (array_key_exists("PLAYERNAME",$refs) == False) {
					//error - player name parameter missing
					$errCode = "RP-2";
					$errMsg = "Register Player - player name parameter missing";}
				elseif (array_key_exists("PIN",$refs) == False) {
					//error - PIN parameter missing
					$errCode = "RP-3";
					$errMsg = "Register Player - PIN parameter missing";}
				else {
					$password = $refs["PIN"];
					$playerName = $refs["PLAYERNAME"];
					
					//PIN cannot be blank
					if (strlen($password)<4 or !ctype_digit($password)) {
						$errCode = "RP-5";
						$errMsg = "Register Player - PIN must be 4 or more digits";}
					else {
						//player name cannot be blank
						if (strlen($playerName)==0) {
							$errCode = "RP-6";
							$errMsg = "Register Player - player name cannot be blank";}
						//player name comprise letters and numbers only
						elseif (!preg_match('/^[a-zA-Z0-9 ]+$/',$playerName)) {
							$errCode = "RP-6";
							$errMsg = "Register Player - player name - " . $playerName . " - must contain only letters and numbers";}
						else {
							//make sure player name doesn't exist already
							$fnResp = fnQrySelectPlayer($playerName);
							if ($fnResp != "player not found") {
								$errCode = "RP-6";
								$errMsg = "Register Player - player name already exists";}
						}
					}
				}
					
				if (strlen($errCode) == 0) {
					//valid input so carry on
					//get a new player ref
					$refsRow = fnReferencesTable("new player ref");
					if (is_string($refsRow)) {
						$errCode = "RP-8";
						$errMsg= "Error setting up new player ref"; }
					else {
						$playerRef = $refsRow['NextPlayerRef']; }
					//create new player record
					$fnResp = fnQryAddPlayer($playerRef,$playerName,$password,$hint);
					if (is_string($fnResp)) {
						$errCode = "RP-7";
						$errMsg = "Register Player - error in fnQryAddPlayer [$fnResp]";}
					else {
						$errCode = "    ";
						$errMsg = "register(playername=".$playerName.";PIN=".$password;
						$errMsg = json_encode(array("type" => "register","playername" => $playerName, "PIN" => $password)); }
				}
				break;
				
			case "RESIGN":
				//two parameters
				if (count($refs) <> 3) {
					//error - incorrect number of parameters
					$errCode = "PR-1";
					$errMsg = "Player Resigns - incorrect number of parameters"; }
				elseif (array_key_exists("PLAYERNAME",$refs) == False) {
					//error - player name parameter missing
					$errCode = "PR-2";
					$errMsg = "Player Resigns - player name parameter missing";}
				elseif (array_key_exists("GAMEREF",$refs) == False) {
					//error - game ref parameter missing
					$errCode = "PR-3";
					$errMsg = "Player Resigns - game ref parameter missing";}

				if (strlen($errCode) == 0) {
					//valid input so carry on
					$gameRef = $refs["GAMEREF"];
					$playerName = $refs["PLAYERNAME"];
					//check player name/PIN
					$fnResp = fnValidatePlayerNamePW($playerName); 
					//if (!ctype_digit($fnResp)) {
					if (array_key_exists('errCode',$fnResp)) {
						$errCode = "PR-7";
						$errMsg = 'Player Resigns - player name and\or PIN is incorrect'; }
					else {
						//Update game record
						$playerRef = $fnResp;
						$gameRow = fnQrySelectGame($gameRef);
						if (is_string($gameRow)) {
							$errCode = "PR-4";
							$errMsg = "Player Resigns - error retrieving game record";}
						else {
							//check player is part of game
							if ($playerRef != $gameRow['P1Ref'] And $playerRef != $gameRow['P2Ref']) {
								$errCode = "PR-5";
								$errMsg = "Player Resigns - player is not part of game";
								fnLogMessageToDb($errCode.$errMsg."/".$playerRef."/".$gameRow['P1Ref']."/".$gameRow['P2Ref']);}
							//check game hasn't already finished
							elseif ($gameRow['Winner'] != 0) {
								$errCode = "PR-6";
								$errMsg = "Player Resigns - game is already finished";
								fnLogMessageToDb($errCode.$errMsg."/".$gameRow['Winner']);}
							elseif ($gameRow['TurnCount'] >= 10) {
								//set a winner and save game
								if ($playerRef == $gameRow['P1Ref']) {
									$gameRow['Winner'] = $gameRow['P2Ref'] ;}
								else {
									$gameRow['Winner'] = $gameRow['P1Ref'] ;}
								$fnResp = fnQryUpdateGame($gameRow['GameRef'],$gameRow['P1Ref'],$gameRow['P2Ref'],$gameRow['LastPlayer'],$gameRow['StartDate'],$gameRow['LastUpdated'],$gameRow['AreaSize'],$gameRow['Winner'],$gameRow['TurnCount']);
								if (strlen($fnResp) > 0) {
									$errCode = "PR-8";
									$errMsg = "Player resigns - ". $fnResp;	}
								else {
									$errCode = "    ";}
							}
							else {
								//set game to void and save game
								$gameRow['Winner'] = -1*$playerRef ;
								$fnResp = fnQryUpdateGame($gameRow['GameRef'],$gameRow['P1Ref'],$gameRow['P2Ref'],$gameRow['LastPlayer'],$gameRow['StartDate'],$gameRow['LastUpdated'],$gameRow['AreaSize'],$gameRow['Winner'],$gameRow['TurnCount']);
								if (strlen($fnResp) > 0) {
									$errCode = "PR-9";
									$errMsg = "Player resigns - ". $fnResp;	}
								else {
									$errCode = "    "; }
							}
							//if there are no errors then return the state of play message
							if ($errCode == "    ") {
								$fnResp = fnStateOfPlay($gameRef);
								if (is_array($fnResp)) {
									//all ok so send stats of play data back
									$errCode = "    ";
									$errMsg = json_encode($fnResp); }
								else {
									//error from state of play
									$errCode = substr($fnResp,0, 5);
									$errMsg = substr($fnResp,5, strlen($fnResp)- 5); } 
							}
						}
					}
				}
				break;
				
			case "GO_BACK":
			case "GOBACK":
				//revert to an earlier stage in the game. Only GAMECENTRAL can use this
				//three parameters - playername, game ref and turncount
				fnLogMessageToDb("Go back message");
				if (count($refs) <> 4) {
					//error - incorrect number of parameters
					$errCode = "GB-1";
					$errMsg = "Go back - incorrect number of parameters"; }
				elseif (array_key_exists("PLAYERNAME",$refs) == False) {
					//error - player name parameter missing
					$errCode = "GB-2";
					$errMsg = "Go back - player name parameter missing";}
				elseif (array_key_exists("GAMEREF",$refs) == False) {
					//error - game ref parameter missing
					$errCode = "GB-3";
					$errMsg = "Go back - game ref parameter missing";}
				elseif (array_key_exists("TURNCOUNT",$refs) == False) {
					//error - turn count parameter missing
					$errCode = "GB-4";
					$errMsg = "Go back - turn count parameter missing";}
				else {
					//get game record
					$gameRef = $refs["GAMEREF"];
					$playerName = $refs["PLAYERNAME"];
					$turnCountGB = $refs["TURNCOUNT"];
					$gameRow = fnQrySelectGame($gameRef);
					if (is_string($gameRow)) {
						$errCode = "GB-6";
						$errMsg = "Go back - error retrieving game record";}
					elseif ($turnCountGB < 1 OR $turnCountGB >= $gameRow['TurnCount']) {
						$errCode = "GB-7";
						$errMsg = "Go back - turn count out of range";}
				}
				fnLogMessageToDb("passed go message checks");
				if (strlen($errCode) == 0) {
					//valid input so carry on
					//check player name/PIN is valid and that it is GAMECENTRAL
					$fnResp = fnValidatePlayerNamePW($playerName); 
					if (array_key_exists('errCode',$fnResp) OR $fnResp != 1) {
						$errCode = "GB-5";
						$errMsg = "Go back - player name and\or PIN is incorrect"; }
					else {
						/*
						Overwrite turn count 0 records with data from corresponding record for GOBACK turn count then delete every record with a turn count greater than GOBACK
						*/
						//begin database transaction
						fnLogMessageToDb("start transaction");
						$conn->beginTransaction();
						$logMsgs=array("rewrite log msgs after rollback");
						//check for any errors
						if (strlen($errCode) == 0) {
							//all ok so do the updates 
							//overwrite Game record for turnCount0 with values from record for turnCount Go BACK
							fnLogMessageToDb("Get game record for turn coutn = GOBACK");
							array_push($logMsgs,"Get game record for turn count = GOBACK");
							$gameRowGB = fnQrySelectGame($gameRef, $turnCountGB); 
							if (is_string($gameRowGB)) {
								$errMsg = "Game " . $gameRef . " and turncount ". $turnCountGB . " not found";
								$errCode = "GB-8"; 
								fnLogMessageToDb($errCode.$errMsg); 
								array_push($logMsgs,$errCode.$errMsg); }
							else {
								fnLogMessageToDb("update game record for turn count = 0  with value from turn count = GOBACK");
								array_push($logMsgs,"update game record for turn count = 0  with value from turn count = GOBACK");
								$fnResp = fnQryUpdateGame($gameRowGB['GameRef'],$gameRowGB['P1Ref'],$gameRowGB['P2Ref'],$gameRowGB['LastPlayer'],$gameRowGB['StartDate'],date("Y-m-d H:i:s"),$gameRowGB['AreaSize'],$gameRowGB['Winner'],$gameRowGB['TurnCount'],0);
								//fnQryUpdateGame ($gameRef, $p1Ref, $p2Ref, $lastPlayer, $startDate, $lastUpdated, $areaSize, $winner, $turnCount, $turnCountVer)
								if (strlen($fnResp) > 0) {
									$errCode = "GB-9";
									$errMsg = "Go Back - " . $fnResp; 
									fnLogMessageToDb($errCode.$errMsg); 
									array_push($logMsgs,$errCode.$errMsg); }
								else {
									//delete Game records with turn count > Go Back
									fnLogMessageToDb("delete game records with turn count > GOBACK");
									array_push($logMsgs,"delete game records with turn count > GOBACK"); 
									$fnResp = fnQryDeleteGames($gameRef, $turnCountGB); 
									if (strlen($fnResp) > 0) {
										$errCode = "GB-I";
										$errMsg = "Go Back - " . $fnResp; 
										fnLogMessageToDb($errCode.$errMsg); 
										array_push($logMsgs,$errCode.$errMsg); }
									else {
										//delete the Stacks records with turn count > Go BACK
										fnLogMessageToDb("delete stacks with turn count > GOBACK");
										array_push($logMsgs,"delete stacks with turn count > GOBACK");
										$fnResp = fnQryDeleteStacksForManyTurns($gameRef, $turnCountGB);
										if (strlen($fnResp) > 0) {
											$errCode = "GB-A";
											$errMsg = "Go Back - " . $fnResp; 
											fnLogMessageToDb($errCode.$errMsg); 
											array_push($logMsgs,$errCode.$errMsg); }
										else {
											//get the Stacks records with turn count = 0
											fnLogMessageToDb("get stacks with turn count = 0");
											array_push($logMsgs,"get stacks with turn count = 0");
											$stackRows0 = fnQrySelectStacks($gameRef, 0);
											if (is_array($stackRows0)==FALSE) {
												$errCode = "GB-B";
												$errMsg = "Stacks for game " . $gameRef . " and turncount 0 not found"; 
												fnLogMessageToDb($errCode.$errMsg); 
												array_push($logMsgs,$errCode.$errMsg); }
											else {
												//get the Stacks records with turn count = GOBACK
												fnLogMessageToDb("update stacks with turn count = GOBACK");
												array_push($logMsgs,"update stacks with turn count = GOBACK");
												$stackRowsGB = fnQrySelectStacks($gameRef,$turnCountGB);
												if (is_array($stackRowsGB)==FALSE) {
													$errMsg = "Stacks for game " . $gameRef . " and turncount " . $turnCountGB . " not found";
													$errCode = "GB-C"; 
													fnLogMessageToDb($errCode.$errMsg); 
													array_push($logMsgs,$errCode.$errMsg); }
												else {
													//copy the Stacks records with turn count = GO BACK into stacks with turn count = 0
													fnLogMessageToDb("copy the stacks with turn count = GO BACK into the stacks with turn count = 0");
													array_push($logMsgs,"copy the stacks with turn count = GO BACK into the stacks with turn count = 0");
													$maxI = count($stackRowsGB);
													for ($i=0; $i<$maxI; $i++) {
														$fnResp = fnQryUpdateStack($stackRowsGB[$i]['StackNum'],$stackRowsGB[$i]['StackHeight'],$stackRowsGB[$i]['Top'],$stackRows0[$i]['StackRecID'],0);
														//fnQryUpdateStack($stackNum, $stackHeight, $top, $stackRecID, $turnCount)
														if (strlen($fnResp) > 0 ){
															$errCode = "GB-D";
															$errMsg = "Go Back - " . $fnResp; 
															fnLogMessageToDb($errCode.$errMsg); 
															array_push($logMsgs,$errCode.$errMsg); 
															break; }
													}
													//if there were no errors then carry on
													if (strlen($errCode) == 0) {
														//delete the counters records with turn count > Go BACK
														fnLogMessageToDb("delete counters with turn count > GO BACK");
														array_push($logMsgs,"delete counters with turn count > GO BACK"); 
														$fnResp = fnQryDeleteCountersForManyTurns($gameRef, $turnCountGB);
														if (strlen($fnResp) > 0) {
															$errCode = "GB-E";
															$errMsg = "Go Back - " . $fnResp; 
															fnLogMessageToDb($errCode.$errMsg); 
															array_push($logMsgs,$errCode.$errMsg); }
														else {
															//delete the counters records with turn count = 0
															fnLogMessageToDb("delete counters with turn count = 0");
															array_push($logMsgs,"delete counters with turn count = 0");
															$fnResp = fnQryDeleteCountersForOneTurn($gameRef, 0);
															if (strlen($fnResp) > 0) {
																$errCode = "GB-F";
																$errMsg = "Go Back - " . $fnResp; 
																fnLogMessageToDb($errCode.$errMsg); 
																array_push($logMsgs,$errCode.$errMsg); }
															else {
																//copy the Counters records with turn count = GO BACK into new Counters records with turn count = 0
																fnLogMessageToDb("select counters");
																$countersRowsGB = fnQrySelectAllCounters($gameRef,$turnCountGB);
																if (is_string($countersRowsGB)) {
																	$errMsg = "Counter records for game " . $gameRef . " and turncount " . $turnCountGB . "not found";
																	$errCode = "GB-G"; 
																	fnLogMessageToDb($errCode.$errMsg); 
																	array_push($logMsgs,$errCode.$errMsg); }
																else {
																	fnLogMessageToDb("copy counters");
																	array_push($logMsgs,"copy counters"); 
																	for ($i=0; $i<count($countersRowsGB); $i++) {
																		$fnResp = fnQryAddCounter($countersRowsGB[$i]['GameRef'],$countersRowsGB[$i]['StackNum'],$countersRowsGB[$i]['PlayerRef'],$countersRowsGB[$i]['CounterHeight'], 0); 
																		if (strlen($fnResp) > 0 ){
																			$errCode = "GB-H";
																			$errMsg = "Go Back - " . $fnResp; 
																			fnLogMessageToDb($errCode.$errMsg); 
																			array_push($logMsgs,$errCode.$errMsg); 																			
																			break; }
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}	 
						}
						if (strlen($errCode) > 0) { 
							//an error has occurred rollback any database uopdates
							$conn->rollback(); 
							//(re)write log messages
							foreach ($logMsgs as $msgs) {fnLogMessageToDb($msgs);}
							fnLogMessageToDb ("Go Back - Rollback"); }
						else {
							$conn->commit(); 
							$fnResp = fnStateOfPlay($gameRef);
							if (is_array($fnResp)) {
								//all ok so send stats of play data back
								$errCode = "";
								$errMsg = json_encode($fnResp); }
							else {
								//error from state of play
								$errCode = substr($fnResp,0, 5);
								$errMsg = substr($fnResp,5, strlen($fnResp)- 5); }
						}
					}
				}
				break;
	
			default:
				//error - invalid input
				$errCode = "PrI-2";
				$errMsg = "input type " . $refs["TYPE"] . " not recognised";
		}
	}

	fnLogMessageToDb("(fnProcessInput) status after case statements: " . $errCode.$errMsg);
	if (strlen(trim($errCode))==0){
		return $errMsg;}
	else{
		return json_encode(array("type"=>"error","ErrorCode"=>$errCode,"ErrorMsg"=>$errMsg));}
} 
//End fnProcessInput
function fnFindParams($callString) {
 	fnLogMessageToDb("start fnFindParams");
	
	//decode the json and create an assoicative array
	$refs = json_decode($callString, True);
	if (is_null($refs)) {
		$refs[0][0] = "FP-1" ; 
		$jsErrMsg = json_last_error() ;
		$refs[0][1] = "Find Params - invalid json - ". $jsErrMsg ; 
		fnLogMessageToDb($refs[0][0].$refs[0][1]);
		return $refs; }
	else {
		return $refs;}
}
//End fnFindParams
function fnProcessNewP1($tbP1NewPlyrName, $silent, $password="", $hint=""){
 	fnLogMessageToDb("start fnProcessNewP1");
	//globals
	global $tbP1NewGameRef, $tbP1NewPlyrRef;
	global $tbP2NewGameRef, $tbP2NewPlyrRef; 

	$errMsg = ""; $errCode = "";
	$gameRef=0;
	$playerRef=0;
	$playerRow=null; $refsRow=null;
	
	//if player name is not blank then see if it already exists
	if (strlen($tbP1NewPlyrName) > 0) {
		$playerRow = fnQrySelectPlayer(strtoupper(trim($tbP1NewPlyrName)));
		if (is_array($playerRow)) {
			$playerRef = $playerRow['PlayerRef'];}
	}

	//get the next game and player refs
	if ($playerRef > 0) {
		//already have a player ref so just get new game ref
		$refsRow = fnReferencesTable("new game ref");
		if (is_array($refsRow)) {
			$gameRef = $refsRow['NextGameRef'];	}
		else {
			$errMsg = "New player 1 - error setting up new game reference";
			$errCode = "NP1-1";
			fnLogMessageToDb($errCode.$errMsg);
			return array("errCode"=>$errCode, "errMsg"=>$errMsg); }
	}
	else {
		$refsRow = fnReferencesTable("new both");
		if  (is_array($refsRow)) {
			$gameRef = $refsRow['NextGameRef'];
			$playerRef = $refsRow['NextPlayerRef']; }
		else {
			$errMsg = "New player 1 - error setting up new game and player references";
			$errCode = "NP1-2";
			fnLogMessageToDb($errCode.$errMsg);
			return array("errCode"=>$errCode, "errMsg"=>$errMsg); }
	}

	//if player name is not blank and its not already on record then associate input name with new player 
	if (strlen($tbP1NewPlyrName) > 0 and is_array($playerRow)==FALSE) {
		$fnResp = fnQryAddPlayer($playerRef, strtoupper(trim($tbP1NewPlyrName)),$password,$hint); 
		if (strlen($fnResp) > 0) {
			$errCode = "NP1-3";
			$errMsg = "New player 1 - " . $fnResp ;
			fnLogMessageToDb($errCode.$errMsg);
			return array("errCode"=>$errCode, "errMsg"=>$errMsg); }
	}

	//create a new game records
	$areaSize=7;
	$fnResp = fnSetUpGameRecs($gameRef, $playerRef, $areaSize);
	if (strlen($fnResp)>0) {
		$errCode = "NP1-4";
		$errMsg = "New player 1 - error setting up game recs"; 
		fnLogMessageToDb($errCode.$errMsg);
		return array("errCode"=>$errCode, "errMsg"=>$errMsg);}
	
	//return the game ref which means all OK
	return $gameRef;
}
//End fnProcessNewP1
function fnSetUpGameRecs($gameRef, $playerRef, $areaSize) {
	global $conn;
 	fnLogMessageToDb("start fnSetUpGameRecs");
	
	//begin database transaction
	$errCode = "";
	$conn->beginTransaction();

	//insert new record into the Games table
	$fnResp = fnQryAddGame($gameRef, $playerRef, 0, 0, date("Y-m-d H:i:s"),date("Y-m-d H:i:s"), $areaSize, 0, 0, 0);
	if (strlen($fnResp)>0) {
		$errCode = "SGR-2";
		$errMsg = "Set up Game Recs - " . $fnResp; 
		fnLogMessageToDb($errCode.$errMsg); }	
	
	//insert new records into the Stacks table
    for ($gStep = 0; $gStep <= $areaSize + 1; $gStep++) {
		if (strlen($errCode)>0) { break; }
		if ($gStep == 0) {
			//set up the player 1 reserve 
			$fnResp = fnQryAddStack($gameRef, $gStep, $areaSize+2, $playerRef, 0); 
			if (strlen($fnResp)>0) {
				$errCode = "SGR-1";
				$errMsg = "Set up Game Recs - " . $fnResp; 
				fnLogMessageToDb($errCode.$errMsg); }
		}
		else {
			$fnResp = fnQryAddStack($gameRef, $gStep, 0, 0, 0); 
			if (strlen($fnResp)>0) {
				$errCode = "SGR-4";
				$errMsg = "Set up Game Recs - " . $fnResp;
				fnLogMessageToDb($errCode.$errMsg);	}
		}
		if (strlen($errCode)>0) { break; }

		//if gStep = 0 the it is the reserve for player 1 so set up counter (layer) records
		if ($gStep == 0) {
			for ($counterHeight = 1; $counterHeight <= $areaSize+2; $counterHeight++) {
				$fnResp = fnQryAddCounter($gameRef, $gStep, $playerRef, $counterHeight, 0); 
				if (strlen($fnResp)>0) {
					$errCode = "SGR-3";
					$errMsg = "Set up Game Recs - " . $fnResp;
					fnLogMessageToDb($errCode.$errMsg);	}
				if (strlen($errCode)>0) { break 2; }
			}
		}
	}
	//end database transaction
	if (strlen($errCode)>0) { 
		//if an error has occurred rollback any database uopdates
		$conn->rollback(); }
	else {
		$conn->commit(); }
	return $errCode.$errMsg;
}
//End fnSetUpGameRecs
function fnProcessNewP2($tbP2NewGameRef, $tbP2NewPlyrName, $silent, $password = "", $hint = ""){
 	fnLogMessageToDb("start fnProcessNewP2");
	
	global $tbP1MoveCount, $tbP1MovePos, $tbP2MoveCount, $tbP2MovePos ;
	
	$playerRef = 0;
	$fnResp =0;
	$errMsg = "";
	$refsRow = null; $playerRow = null;

	//if player name is not blank then see if it already exists
	if (strlen($tbP2NewPlyrName) > 0) {
		// . "new player name: " . $tbP2NewPlyrName .".";
		$playerRow = fnQrySelectPlayer(strtoupper(trim($tbP2NewPlyrName)));
		if (is_array($playerRow)) {
		$playerRef = $playerRow['PlayerRef']; } }

	if ($playerRef == 0) {
		//get a new player ref
		$refsRow = fnReferencesTable("new player ref");
		if  (is_string($refsRow)) {
			$errCode = "NP2-1";
			$errMsg = "New player 2 - error setting up new player references";
			fnLogMessageToDb($errCode.$errMsg);
			return array("errCode"=>$errCode, "errMsg"=>$errMsg); }
		else {
			$playerRef = $refsRow['NextPlayerRef']; } }

	//if player name is not blank and its not already on record then associate input name with new player 
	if (strlen($tbP2NewPlyrName) > 0 And is_string($playerRow)) {
		//adding new player
		$fnResp = fnQryAddPlayer($playerRef, strtoupper(trim($tbP2NewPlyrName)),$password,$hint); 
		if (strlen($fnResp) > 0) {
			$errCode = "NP2-6";
			$errMsg = "New player 2 - " . $fnResp ;
			fnLogMessageToDb($errCode.$errMsg);
			return array("errCode"=>$errCode, "errMsg"=>$errMsg); }
	}

	//display player ref
	$tbP2NewPlyrRef = $playerRef;

	//'set up player 2 reserve in database
	$fnResp = fnSetUpPlayer2($playerRef, $tbP2NewGameRef, $password, $hint);
        if ($fnResp == 1) {
			$errMsg = "New player 2 - invalid game ref";
			$errCode = "NP2-2";
			fnLogMessageToDb($errCode.$errMsg);
			return array("errCode"=>$errCode, "errMsg"=>$errMsg); }
		elseif ($fnResp == 2) {
			$errMsg = "New player 2 - player 2 already exists";
			$errCode = "NP2-4";
			fnLogMessageToDb($errCode.$errMsg);
			return array("errCode"=>$errCode, "errMsg"=>$errMsg); }
		elseif ($fnResp == 3) {
			$errMsg = "New player 2 - database updates failed";
			$errCode = "NP2-7";
			fnLogMessageToDb($errCode.$errMsg);
			return array("errCode"=>$errCode, "errMsg"=>$errMsg); }
		elseif ($fnResp > 0) {
			$errMsg = "New player 2 - unknown error";
			$errCode = "NP2-5";
			fnLogMessageToDb($errCode.$errMsg);
			return array("errCode"=>$errCode, "errMsg"=>$errMsg); }

	//clear any player input 
	$tbP1MoveCount = ""; $tbP1MovePos = ""; $tbP2MoveCount = ""; $tbP2MovePos = "";

	//return empty errMsg which means all OK
	return $errMsg;
}
//End fnProcessNewP2
function fnSetUpPlayer2($playerRef, $tbP2NewGameRef, $password, $hint) {
 	fnLogMessageToDb("start fnSetUpPlayer2");
	global $conn;
	
	$areaSize =0;

	//find game record
	$gameRow = fnQrySelectGame($tbP2NewGameRef);
	if (is_string($gameRow)) {
		return 1; }

	//the player 2 ref should be zero
	if ($gameRow['P2Ref'] <> 0) {
		return 2;}

	//begin database transaction
	$errCode = ""; $errMsg = "";
	$conn->beginTransaction();

	$fnResp = fnQryUpdateGame ($tbP2NewGameRef,$gameRow['P1Ref'],$playerRef,$playerRef,$gameRow['StartDate'],date("Y-m-d H:i:s"),$gameRow['AreaSize'],$gameRow['Winner'],$gameRow['TurnCount'] );
	if (strlen($fnResp) > 0) {
		$errCode = "SP2-1";
		$errMsg = "Setup player 2 - " . $fnResp ;
		fnLogMessageToDb($errCode.$errMsg); }

	$areaSize = $gameRow['AreaSize'];

	//find the GameStep records for this the player 2 reserve 
	$stackRows = fnQrySelectStacks($tbP2NewGameRef,0);

	//set height of reserve and save record
	$fnResp = fnQryUpdateStack($areaSize+1, $areaSize+2, $playerRef,$stackRows[$areaSize+1]['StackRecID']);
	if (strlen($fnResp) > 0) {
		$errCode = "SP2-2";
		$errMsg = "Setup player 2 - " . $fnResp ;
		fnLogMessageToDb($errCode.$errMsg); }

	//set up layers records for player 2 reserve
	for ($counterHeight=1; $counterHeight <= $areaSize + 2; $counterHeight++) {
		$fnResp = fnQryAddCounter($tbP2NewGameRef, $areaSize+1, $playerRef, $counterHeight, 0); 
		if (strlen($fnResp) > 0) {
			$errCode = "SP2-3";
			$errMsg = "Setup player 2 - " . $fnResp ;
			fnLogMessageToDb($errCode.$errMsg); 
			break; }
	}

	//end database transaction
	if (strlen($errCode)>0) { 
		//if an error has occurred rollback any database uopdates
		$conn->rollback(); 
		return 3; }
	else {
		$conn->commit(); }
		
	return 0;
}
//End fnSetUpPlayer2
function fnStateOfPlay($gameKey, $turnCount=0) {
 	fnLogMessageToDb("start fnStateOfPlay for ".$gameKey);
	global $tbP1OldGameRef, $tbP1NewGameRef;
	global $tbP2OldGameRef;
	$errMsg = ""; $errCode = ""; $sopData = "";
	$gameRef = ""; $hashKey = "";

	//get game record
	if (strlen($gameKey)<20) {
		fnLogMessageToDb("get game record using game ref");
		$gameRef = $gameKey;
		$gameRow = fnQrySelectGame($gameRef, $turnCount);
		if (is_array($gameRow)==FALSE) {
			$errCode = "SoP-1";
			$errMsg = "Game " . $gameRef . " and turn count " . $turnCount . " not found in fnQrySelectGame";
			fnLogMessageToDb($errCode.$errMsg); }
	}
	else {
		fnLogMessageToDb("get game record using hashKey");
		$hashKey = $gameKey;
		$gameRow = fnQrySelectNmxGame($hashKey);
		if (is_string($gameRow)) {
			$errCode = "SoP-4";
			$errMsg = $gameRow;	
			fnLogMessageToDb ($errCode.$errMsg); }
		else {
			$gameRow['P1Name'] = "One";
			$gameRow['P2Name'] = "Two"; 
			if ($gameRow['P1Ref'] == $gameRow['LastPlayer']) {$gameRow['LPName'] = $gameRow['P2Name'];} else {$gameRow['LPName'] = $gameRow['P1Name'];} }
	}
	if (strlen($errCode)==0) {
		//calculate dimensions
		$sideSpacer = 8;
		$areaSize = $gameRow['AreaSize'];

		//start building output list
		$sopData = "gameRef=" . $gameRef . ";player1Name=" . $gameRow['P1Name'] . ";player2Name=" . $gameRow['P2Name'] ;
		$sopArray = array("type" => "game_status", "GameRef" => $gameRow['GameRef'], "Player1Name" => $gameRow['P1Name'], "Player2Name" => $gameRow['P2Name']) ;
		$sopData = $sopData . ";turnCount=" . $gameRow['TurnCount'] . ";lastPlayer=" . $gameRow['LPName'];
		$sopArray += array("TurnCount" => $gameRow['TurnCount']);
		$sopArray += array("LastPlayer" => $gameRow['LPName']);
		$sopData = $sopData . ";areaSize=" . $gameRow['AreaSize'] . ";winner=" ;
		$sopArray += array("AreaSize" => $gameRow['AreaSize']);
		if ($gameRow['Winner'] == $gameRow['P1Ref']) {
			$sopData = $sopData . $gameRow['P1Name'];
			$sopArray += array("Winner" => $gameRow['P1Name']); } 
		elseif ($gameRow['Winner'] == $gameRow['P2Ref']){ 
			$sopData = $sopData . $gameRow['P2Name'];
			$sopArray += array("Winner" => $gameRow['P2Name']);} 
		elseif ($gameRow['Winner'] < 0){ 
			$sopData = $sopData . "Void";
			$sopArray += array("Winner" => "Void");} 
		else { 
			$sopArray += array("Winner" => "");} 

		//get player 1 reserve
		if ($hashKey == "") {
			$stackRows = fnQrySelectStacks($gameRef,$turnCount);
			if (is_array($stackRows)==FALSE) {
				$errCode = "SoP-2";
				$errMsg = $stackRows;
				fnLogMessageToDb($errCode.$errMsg); 
			}
		}
		else {
			$stackRows = fnQrySelectNmxStacks($hashKey);
			if (is_string($stackRows)) {
				$errMsg = $stackRows;
				$errCode = "SoP-3";
				fnLogMessageToDb($errCode.$errMsg); }
		}
	}
	if (strlen($errCode)==0) {
		//process playing area
		$sopArray["Stacks"] = array();
		for ($stepNum=1; $stepNum <= $areaSize+2; $stepNum++) {
			$sopData = $sopData . ";stack=" . $stepNum . "," . $stackRows[$stepNum]['StackHeight'] . ",";
			$sopArray["Stacks"][$stepNum-1] = array("Stack" => $stepNum-1, "Height" => $stackRows[$stepNum-1]['StackHeight']);
			if ($stackRows[$stepNum-1]['Top'] == $gameRow['P1Ref'] And $gameRow['P1Ref'] <> 0) {
				$sopData = $sopData . "P1";
				$sopArray["Stacks"][$stepNum-1] += array("Top" => "1"); } 
			elseif ($stackRows[$stepNum-1]['Top'] == $gameRow['P2Ref'] And $gameRow['P2Ref'] <> 0) {
				$sopData = $sopData . "P2";
				$sopArray["Stacks"][$stepNum-1] += array("Top" => "2"); } 
			else {
				$sopData = $sopData . "0";
				$sopArray["Stacks"][$stepNum-1] += array("Top" => ""); }
		}
	}
	//if there is an error message then return it otherwise return the state of play data 
	if (strlen($errCode) > 0) {
		fnLogMessageToDb($errCode.$errMsg);
		return $errCode.$errMsg;}
	else {
		return $sopArray;}
}
//End fnStateOfPlay
function fnDataChecks($gameKey) {
	fnLogMessageToDb("starting data checks for gameKey ".$gameKey);
	//get game record
	if (strlen($gameKey)<20) {
		$gameRecID=$gameKey; }
	else {
		$gameRecID = 0;
		$hashKey = $gameKey; }

	$errCode = "";
	//get the relevant game, stacks and counters records
	if ($gameRecID>0) {
		//get game record using GameRecID
		fnLogMessageToDb("get game record using GameRecID");
		$gameRow = fnQrySelectGameByID($gameRecID);
		if (is_string($gameRow)) {
			$errCode = "DCH-1";
			$errMsg = $gameRow; 
			fnLogMessageToDb ($errCode.$errMsg); }
		else {
			fnLogMessageToDb("get counters records using GameRef and TurnCount");
			$countersRows = fnQrySelectAllCounters($gameRow['GameRef'], $gameRow['TurnCountVer']);
			if (is_string($countersRows)) {
				$errCode = "DCH-3";
				$errMsg = $countersRows;
				fnLogMessageToDb ($errCode.$errMsg); }
			else {
				//get stacks records
				fnLogMessageToDb("get stacks records using GameRef and TurnCount");
				$stackRows = fnQrySelectStacks($gameRow['GameRef'], $gameRow['TurnCountVer']);
				if (is_string($stackRows)) {
					$errCode = "DCH-2";
					$errMsg = $stackRows; 
					fnLogMessageToDb ($errCode.$errMsg); }
			}
		}
	}
	else {
		//get the relevant game, stacks and counters records using hash key
		fnLogMessageToDb("get game record using hashKey");
		$gameRow = fnQrySelectNmxGame($hashKey);
		if (is_string($gameRow)) {
			$errCode = "DCH-4";
			$errMsg = $gameRow;	
			fnLogMessageToDb ($errCode.$errMsg); }
		else {
			//get counters records
			fnLogMessageToDb("get counters records using hashKey");
			$countersRows = fnQrySelectAllNmxCounters($hashKey);
			if (is_string($countersRows)) {
				$errCode = "DCH-6";
				$errMsg = $countersRows; 
				fnLogMessageToDb ($errCode.$errMsg); }		
			else {
				//get stacks records
				fnLogMessageToDb("get stacks records using hashKey");
				$stackRows = fnQrySelectNmxStacks($hashKey);
				if (is_string($stackRows)) {
					$errCode = "DCH-5";
					$errMsg = $stackRows;
					fnLogMessageToDb ($errCode.$errMsg); }
			}
		}
	}
	//check for errors
	if (strlen($errCode)>0) {
		echo $errCode.$errMsg;
		return $errCode.$errMsg; }

	//check game record
	echo "checking game" . $gameRow['GameRef'] . "v" . $gameRow['TurnCountVer'] . " / " . $gameRow['TurnCount'] . " (key=" . $gameKey . ")" . "<br>";
	//Must be areaSize + 2 stack records with the same gameKey
	if (count($stackRows) != $gameRow['AreaSize'] + 2) {
		$errCode = "DCH-7";
		$errMsg = "Wrong number of stacks " . count($stackRows); 
		echo $errCode.$errMsg."<br>";
		fnLogMessageToDb($errCode.$errMsg);}
	//Must be (areaSize + 2) * 2 counters records with the same gameKey
	if (count($countersRows) != ($gameRow['AreaSize'] + 2)*2) {
		$errCode = "DCH-8";
		$errMsg = "Wrong number of counters " . count($countersRows); 
		echo $errCode.$errMsg."<br>";
		fnLogMessageToDb($errCode.$errMsg);}

	//check stack records
	//The Top for each stack must be zero or it must match one of the player refs in the Game record 
	$maxI = count($stackRows);
	for ($i=0; $i<$maxI; $i++) {
		if ($stackRows[$i]['Top'] != $gameRow['P1Ref'] and $stackRows[$i]['Top'] != $gameRow['P2Ref'] and $stackRows[$i]['Top'] != 0) {
			$errCode = "DCH-9";
			$errMsg = "Invalid stack. Top = " . $stackRows[$i]['Top'] . " for stack " . $stackRows[$i]['StackRecID'];
			echo $errCode.$errMsg."<br>";
			fnLogMessageToDb($errCode.$errMsg); }
		//if height is zero the top must be zero
		if ($stackRows[$i]['StackHeight'] == 0 and $stackRows[$i]['Top'] != 0) {
			$errCode = "DCH-G";
			$errMsg = "Stack height is zero but Top is not zero on stack " . $stackRows[$i]['StackRecID'];
			echo $errCode.$errMsg."<br>";
			fnLogMessageToDb($errCode.$errMsg); }
		else {
			//If the Top is not zero then there must be a counter for the same stack and the same height
			$found = FALSE;
			if ($stackRows[$i]['Top'] != 0) {
				$maxJ = count($countersRows);
				for ($j=0; $j<$maxJ; $j++){
					if ($countersRows[$j]['StackNum'] == $i and $stackRows[$i]['Top'] == $countersRows[$j]['PlayerRef'] and $stackRows[$i]['StackHeight'] == $countersRows[$j]['CounterHeight']) {
						$found = TRUE;
						break; }
				}
				if ($found == FALSE) {
					$errCode = "DCH-E";
					$errMsg = "No top counter for stack " . $stackRows[$i]['StackRecID'];
					echo $errCode.$errMsg."<br>";
					fnLogMessageToDb($errCode.$errMsg); }
			}
		}
	}
	
	//check counters records
	//The counter records for a particular stack must be sequential counterHeight starting at 1
	$lastStackNum = -1;
	$maxI = count($countersRows);
	for ($i=0; $i<$maxI; $i++) {
		//if stack num changes then counterHeight must be 1 otherwise counterHeight must be 1 greater than the previous one
		if ($countersRows[$i]['StackNum'] != $lastStackNum) {
			if ($countersRows[$i]['CounterHeight'] != 1) {
				$errCode = "DCH-A";
				$errMsg = "counter height not equal to 1 for counter " . $countersRows[$i]['CounterRecID'];
				echo $errCode.$errMsg."<br>";
				fnLogMessageToDb($errCode.$errMsg); }
			//The highest counter for a particular stack must match the stackHeight of the corresponding stack record
			if ($i > 0 and $countersRows[$i-1]['CounterHeight'] != $stackRows[$countersRows[$i-1]['StackNum']]['StackHeight']) {
				$errCode = "DCH-C";
				$errMsg = "counter height doesn't match stack for counter " . $countersRows[$i-1]['CounterRecID'];
				echo $errCode.$errMsg."<br>";
				fnLogMessageToDb($errCode.$errMsg); }
			//reset lastStackNum
			$lastStackNum = $countersRows[$i]['StackNum'];
		}
		else {
			if ($countersRows[$i]['CounterHeight'] != $countersRows[$i-1]['CounterHeight'] + 1) {
				$errCode = "DCH-B";
				$errMsg = "counter height not incrementing by 1 for counter " . $countersRows[$i]['CounterRecID'];
				echo $errCode.$errMsg."<br>";
				fnLogMessageToDb($errCode.$errMsg);
			}
		}
		//The Player ref for each counter must match one of the player refs in the Game record 
		if ($countersRows[$i]['PlayerRef'] != $gameRow['P1Ref'] and $countersRows[$i]['PlayerRef'] != $gameRow['P2Ref']) {
			$errCode = "DCH-F";
			$errMsg = "invalid player ref on counter " . $countersRows[$i]['CounterRecID'];
			echo $errCode.$errMsg."<br>";
			fnLogMessageToDb($errCode.$errMsg); }
	}
	//The highest counter for a particular stack must match the stackHeight of the corresponding stack record
	$i = count($countersRows);
	if ($i > 0 and $countersRows[$i-1]['CounterHeight'] != $stackRows[$countersRows[$i-1]['StackNum']]['StackHeight']) {
		$errCode = "DCH-D";
		$errMsg = "counter height doesn't match stack for counter " . $countersRows[$i-1]['CounterRecID'];
		echo $errCode.$errMsg."<br>";
		fnLogMessageToDb($errCode.$errMsg); }
	if (strlen($errCode)==0) {
		fnLogMessageToDb("No errors data errors found");
		echo "No errors data errors found";
	}
}
//End fnDataChecks
function fnErrorHandler($errorLevel,$errorMessage,$errorFile="",$errorLine="",$errorContext="") {
 	//fnLogMessageToDb("start fnErrorHandler");
	global $callString;
	$errString = date("Y-m-d H:i:s")." error level=>".$errorLevel."< error message=>".$errorMessage;
	if (strlen($errorFile) != 0) {
		$errString = $errString."< error file=>".$errorFile."< ";}
	if (strlen($errorLine) != 0) {
		$errString = $errString."< error line=".$errorLine."< "; }
	$errString = $errString."\n";
	if (substr($callString,0,4)=="cron") {
		file_put_contents("/home/vhosts/www.milophillip.xyz/Logs/comment_log.txt",$errString,FILE_APPEND); }
	else {
		file_put_contents("/home/vhosts/www.milophillip.xyz/Logs/comment_log.txt",$errString,FILE_APPEND); }
	
}
//End fnErrorHandler
function fnCommentLog($comment) {
	$commentString = date("Y-m-d H:i:s")." comment=>".$comment."< \n";
	file_put_contents("/home/vhosts/www.milophillip.xyz/Logs/comment_log.txt",$commentString,FILE_APPEND);
}
//End fnCommentLog
?>